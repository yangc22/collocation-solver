% function collocation_solver(y0, z0, p, ti, tM, t_span, tol, alpham, output)
function collocation_solver(y0, z0, p, ti, tM, t_span, output_File, alpham, tolerance, nodes_max, mesh_max, nx, nu, nw, nd, ns, test_id);

warning off
t_all = tic;

global ny nz np N tol rk m

if (size(y0, 1) ~= size(z0, 1))
    error('Error. \nInput size is not right, input size of y (%d) is not equal to input size of z (%d).',size(y0, 1),size(z0, 1));
end

ny = size(y0, 2);
nz = size(z0, 2);
np = size(p, 1);
N = size(y0, 1);
m = 5;

MAX_ITER = 500;
alpha0search = 20;
nodes_min = 3;
tol = tolerance;

alpha = 1;
beta = 0.8;
flag = 0;
flag_coefficients = m;

time_residual = 0;
time_construct = 0;
time_BABD = 0;
number_of_times_residual = 0;
number_of_times_construct = 0;
number_of_times_BABD = 0;

% file to print the run-time information
filename_info = [output_File, '_info.txt'];
fileID_info = fopen(filename_info,'w');
fprintf(fileID_info, '%s\n', 'Smoothed Fischer-Burmeister noninterior');
fprintf(fileID_info, '%s%d\n', 'method: LOBATTO, stages: ', m);
%% Get Integrator Coefficients
rk = lobatto(flag_coefficients);
%% Initial Guess
sol = form_initial_input(t_span, y0, z0, p, alpha);
[t_span, q0] = struct_to_vec(sol);
%% Continuation Method
for alphacal = 1 : MAX_ITER
    %% Multiple Shooting method
    mesh_time = 0;
    for caltime=1:MAX_ITER
        %% Computer F(s0)
        t_residual = tic;
        [F_q0, sol] = F_q(t_span, q0, alpha);
        time_residual_it = toc(t_residual);
        time_residual = time_residual + time_residual_it;
        number_of_times_residual = number_of_times_residual + 1;
        if norm(F_q0, Inf) < tol
            disp(['alpha = ', num2str(alpha), '; nodes = ', num2str(N), '.']);
            fprintf(fileID_info, '%s%d%s%d\n', 'alpha = ', alpha, '; nodes = ', N);
            break
        end
        if caltime == MAX_ITER
            disp('Solution is not converging.');
            fprintf(fileID_info, '%s\n', 'Solution is not converging.');
            fprintf(test_id, '%s\n', 'Solution is not converging.');
            flag = 1;
            break
        end
        
        t_construct = tic;
        % Generation of the Jacobian Matrix
        sol = DF_construct(sol, alpha);
%         DF = get_real_jacobian(sol);
        time_construct_it = toc(t_construct);
        time_construct = time_construct + time_construct_it;
        number_of_times_construct = number_of_times_construct + 1;

        t_BABD = tic;
        %% QR decomposition
        sol = sequential_qr(sol);
        %% Compute delta_s
        sol = backwardsubstitution(sol);
        delta_q = get_deltaq(sol);
%         residual = compute_segment_residual(sol, alpha);
%         %% Finitie Diiference
%         M = f_d_jacobian(t_span, q0, alpha);
%         delta_q = M \ (-F_q0);
        time_BABD_it = toc(t_BABD);
        time_BABD = time_BABD + time_BABD_it;
        number_of_times_BABD = number_of_times_BABD + 1;
        if norm(delta_q, Inf) < tol
            disp(['alpha = ', num2str(alpha), '; nodes = ', num2str(N)]);
            fprintf(fileID_info, '%s%d%s%d\n', 'alpha = ', alpha, '; nodes = ', N);
            break
        end
        
        %% Find an alpha linesearch
        if (isnan(norm(delta_q)))
            [residual, ~] = compute_segment_residual1(t_span, q0, alpha);
            [y0, ~, z0, ~] = recover_solution(t_span, q0);
            [t_span, y0, z0] = remesh(t_span, y0, z0, residual);
            sol = form_initial_input(t_span, y0, z0, p, alpha);
            [t_span, q0] = struct_to_vec(sol);
            mesh_time = mesh_time + 1;
            disp(['Wrong Direction! Remesh!, Number of nodes = ', num2str(N)]);
            fprintf(fileID_info, '%s%d\n', 'Wrong Direction! Need to remesh!, Number of nodes = ', N);
        else
            alpha0 = 1;
            for i=1 : alpha0search
                q_new = q0 + alpha0 * delta_q;
                t_residual = tic;
                [F_q_new, ~] = F_q(t_span, q_new, alpha);
                time_residual_it = toc(t_residual);
                time_residual = time_residual + time_residual_it;
                number_of_times_residual = number_of_times_residual + 1;
                if (norm(F_q_new, Inf) < norm(F_q0, Inf)) || (norm(F_q_new, Inf) < tol)
                    q0 = q_new;
                    break
                end
                
                alpha0 = alpha0/2;
            end
            if i == alpha0search
                disp(['The solution does not converge at the alpha line-search, Remesh!, alpha = ', num2str(alpha), '; Nodes = ', num2str(N)]);
                fprintf(fileID_info, '%s%d%s%d\n', 'The solution does not converge at the alpha line-search, Remesh!, alpha = ', alpha, '; Nodes = ', N);
                residual = compute_segment_residual(sol, alpha);
                [t_span, q0] = mesh_refinement(t_span, q0, residual);
                mesh_time = mesh_time + 1;
                disp(['Remeshed!, Number of nodes = ', num2str(N)]);
                fprintf(fileID_info, '%s%d\n', 'Remeshed!, Number of nodes = ', N);
            end
        end
        if N > nodes_max || N < nodes_min
            disp('Number of nodes is too many or too few!');
            fprintf(fileID_info, '%s%d\n', 'Number of nodes is too many or too few! Nodes = ', N);
            flag = 1;
            break;
        elseif mesh_time > mesh_max
            disp('Failed to find the right solutino after too many meshes!');
            fprintf(fileID_info, '%s\n', 'Failed to find the right solutino after too many meshes!');
            flag = 1;
            break;
        end
    end
    if flag == 1
        disp(['The solution does not converge, Stop!, alpha = ', num2str(alpha)]);
        fprintf(fileID_info, '%s%d\n', 'The solution does not converge, Stop!, alpha = ', alpha);
        fprintf(test_id, '%s%d\n', 'The solution does not converge, Stop!, alpha = ', alpha);
        break
    end
    [residual, max_residual] = compute_segment_residual1(t_span, q0, alpha);
    fprintf(1, '%s%d%s%d%s\n', 'Residual = ', max_residual, '. Number of Nodes = ', N, '.');
    fprintf(fileID_info, '%s%d%s%d%s\n', 'Residual = ', max_residual, '. Number of Nodes = ', N, '.');
    if max_residual > 1
        [y0, ~, z0, ~] = recover_solution(t_span, q0);
        [t_span, y0, z0] = remesh(t_span, y0, z0, residual);
        sol = form_initial_input(t_span, y0, z0, p, alpha);
        [t_span, q0] = struct_to_vec(sol);
        [residual, max_residual] = compute_segment_residual1(t_span, q0, alpha);
        fprintf(1, '%s%d%s%d%s\n', 'Residual = ', max_residual, '. Number of Nodes = ', N, '.');
        fprintf(fileID_info, '%s%d%s%d%s\n', 'Residual = ', max_residual, '. Number of Nodes = ', N, '.');
    else
        if alpha <= alpham
            disp('Get the final solution');
            fprintf(fileID_info, '%s%d\n', 'Get the final solution. alpha = ', alpha);
            fprintf(test_id, '%s%d\n', 'Get the final solution. alpha = ', alpha);
            break
        end
        alpha = beta*alpha;
        if alpha < 1e-6
            tol = 0.9*alpha;
        end
    end
end
time_all = toc(t_all);
fprintf(test_id, '%s%d\n', 'Total running time = ', time_all);
fclose(fileID_info);
%% Save Final Result
[sol_y, sol_yDot, sol_z, sol_p] = recover_solution(t_span, q0);

filename_y = [output_File, '_y.txt'];
fileID_y = fopen(filename_y,'w');
spec = '%8.6f';
for i = 1 : ny
    spec = [spec, ' %12.8f'];
end
spec = [spec, '\n'];
sol = [t_span sol_y]';
fprintf(fileID_y,spec,sol);
fclose(fileID_y);

filename_yDot = [output_File, '_yDot.txt'];
fileID_yDot = fopen(filename_yDot,'w');
spec = [];
for i = 1 : ny
    spec = [spec, ' %12.8f'];
end
spec = [spec, '\n'];
fprintf(fileID_yDot, spec, (sol_yDot)');
fclose(fileID_yDot);

filename_z = [output_File, '_z.txt'];
fileID_z = fopen(filename_z,'w');
spec = [];
for i = 1 : nz
    spec = [spec, ' %12.8f'];
end
spec = [spec, '\n'];
fprintf(fileID_z, spec, (sol_z)');
fclose(fileID_z);

filename_p = [output_File, '_p.txt'];
fileID_p = fopen(filename_p,'w');
fprintf(fileID_p, '%12.8f\n', [sol_p]);
fclose(fileID_p);

filename_alpha = [output_File, '_alpha.txt'];
fileID_alpha = fopen(filename_alpha,'w');
fprintf(fileID_alpha, '%12.8f\n', [alpha]);
fclose(fileID_alpha);

filename_time = [output_File, '_time.txt'];
fileID_time = fopen(filename_time, 'w');
fprintf(fileID_time,'%12.8f\n',time_all);
fclose(fileID_time);

filename_time_construct = [output_File, '_time_construct.txt'];
fileID_time_construct = fopen(filename_time_construct, 'w');
fprintf(fileID_time_construct,'%12.8f\n',time_construct);
fclose(fileID_time_construct);
filename_time_residual = [output_File, '_time_residual.txt'];
fileID_time_residual = fopen(filename_time_residual, 'w');
fprintf(fileID_time_residual,'%12.8f\n',time_residual);
fclose(fileID_time_residual);
filename_time_BABD = [output_File, '_time_BABD.txt'];
fileID_time_BABD = fopen(filename_time_BABD, 'w');
fprintf(fileID_time_BABD,'%12.8f\n',time_BABD);
fclose(fileID_time_BABD);

filename_times_construct = [output_File, '_times_construct.txt'];
fileID_times_construct = fopen(filename_times_construct, 'w');
fprintf(fileID_times_construct,'%d\n',number_of_times_construct);
fclose(fileID_times_construct);
filename_times_residual = [output_File, '_times_residual.txt'];
fileID_times_residual = fopen(filename_times_residual, 'w');
fprintf(fileID_times_residual,'%d\n',number_of_times_residual);
fclose(fileID_times_residual);
filename_times_BABD = [output_File, '_times_BABD.txt'];
fileID_times_BABD = fopen(filename_times_BABD, 'w');
fprintf(fileID_times_BABD,'%d\n',number_of_times_BABD);
fclose(fileID_times_BABD);

%% Plot the results
for i = 1 : nx
    figure();
    plot(t_span, sol_y(:, i));
    legend(['x_', num2str(i)]);
    xlabel('Time');
    ylabel('State');
    grid on
end
for i = 1 : nx
    figure();
    plot(t_span, sol_y(:, i + nx));
    legend(['\lambda_', num2str(i)]);
    xlabel('Time');
    ylabel('Costate');
    grid on
end
for i = 1 : nw
    figure();
    plot(t_span, sol_y(:, i + 2 * nx));
    legend(['\gamma_', num2str(i)]);
    xlabel('Time');
    ylabel('Co-Parameter-State');
    grid on
end
for i = 1 : nu
    figure();
    plot(t_span, sol_z(:, i));
    legend(['u_', num2str(i)]);
    xlabel('Time');
    ylabel('Control');
    grid on
end
for i = 1 : nd
    figure();
    plot(t_span, sol_z(:, nu + i));
    legend(['\mu_', num2str(i)]);
    xlabel('Time');
    ylabel('Lagrange Parameter w.r.t CVIC');
    grid on
end
for i = 1 : ns
    figure();
    plot(t_span, sol_z(:, nu + nd + i));
    legend(['\sigma_', num2str(i)]);
    xlabel('Time');
    ylabel('Lagrange Parameter w.r.t SVIC');
    grid on
end
for i = 1 : nd
    figure();
    plot(t_span, sol_z(:, nu + nd + ns + i));
    legend(['v_', num2str(i)]);
    xlabel('Time');
    ylabel('Lagrange Parameter w.r.t CVIC');
    grid on
end
for i = 1 : ns
    figure();
    plot(t_span, sol_z(:, nu + 2 * nd + ns + i));
    legend(['\xi_', num2str(i)]);
    xlabel('Time');
    ylabel('Lagrange Parameter w.r.t SVIC');
    grid on
end
end


%% Lobatto coefficients for the collocation points
function rk = lobatto(m)

rk = struct('stages', 0, 'order', 0, 'A', [], 'b', [], 'c', [], 'd', [], 'w', []);

if m == 3
    rk.stages = 3;
    rk.order  = 4;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(2, 1) = 2.0833333333333337e-01;
    rk.A(2, 2) = 3.3333333333333337e-01;
    rk.A(2, 3) = -4.1666666666666671e-02;
    rk.A(3, 1) = 1.6666666666666652e-01;
    rk.A(3, 2) = 6.6666666666666674e-01;
    rk.A(3, 3) = 1.6666666666666663e-01;
    rk.b(1) = 1.6666666666666652e-01;
    rk.b(2) = 6.6666666666666674e-01;
    rk.b(3) = 1.6666666666666663e-01;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 5.0000000000000000e-01;
    rk.c(3) = 1.0000000000000000e+00;
    % Arrays of Anonymous Functions
    rk.I = {@(t) 0.666666666666667*t^3 - 1.5*t^2 + 1.0*t;
        @(t) -1.33333333333333*t^3 + 2.0*t^2;
        @(t) 0.666666666666667*t^3 - 0.5*t^2};
    % Arrays of Anonymous Functions
    rk.L = {@(t) (-2.0*t + 1.0)*(-1.0*t + 1.0);
        @(t) 2.0*t*(-2.0*t + 2.0);
        @(t) 1.0*t*(2.0*t - 1.0)};
    rk.w(1) = 8.3333333333333925e-02;
    rk.w(2) = 4.1666666666666519e-01;
    rk.w(3) = 4.1666666666666607e-01;
    rk.w(4) = 8.3333333333333259e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 2.7639320225002106e-01;
    rk.d(3) = 7.2360679774997894e-01;
    rk.d(4) = 1.0000000000000000e+00;
elseif m == 4
    rk.stages = 4;
    rk.order  = 6;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(2, 1) = 1.1030056647916493e-01;
    rk.A(2, 2) = 1.8969943352083510e-01;
    rk.A(2, 3) = -3.3907364229143935e-02;
    rk.A(2, 4) = 1.0300566479164927e-02;
    rk.A(3, 1) = 7.3032766854168651e-02;
    rk.A(3, 2) = 4.5057403089580994e-01;
    rk.A(3, 3) = 2.2696723314583123e-01;
    rk.A(3, 4) = -2.6967233145831493e-02;
    rk.A(4, 1) = 8.3333333333333925e-02;
    rk.A(4, 2) = 4.1666666666666519e-01;
    rk.A(4, 3) = 4.1666666666666607e-01;
    rk.A(4, 4) = 8.3333333333333259e-02;
    rk.b(1) = 8.3333333333333925e-02;
    rk.b(2) = 4.1666666666666519e-01;
    rk.b(3) = 4.1666666666666607e-01;
    rk.b(4) = 8.3333333333333259e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 2.7639320225002106e-01;
    rk.c(3) = 7.2360679774997894e-01;
    rk.c(4) = 1.0000000000000000e+00;
    
    rk.I = {@(t) -1.25*t^4 + 3.33333333333333*t^3 - 3.0*t^2 + 1.0*t;
        @(t) 2.79508497187474*t^4 - 6.42350327708281*t^3 + 4.04508497187474*t^2;
        @(t) -2.79508497187474*t^4 + 4.75683661041614*t^3 - 1.54508497187474*t^2;
        @(t) 1.25*t^4 - 1.66666666666667*t^3 + 0.5*t^2};
    
    rk.L = {@(t) (-3.61803398874989*t + 1.0)*(-1.38196601125011*t + 1.0)*(-1.0*t + 1.0);
        @(t) 3.61803398874989*t*(-2.23606797749979*t + 1.6180339887499)*(-1.38196601125011*t + 1.38196601125011);
        @(t) 1.38196601125011*t*(-3.61803398874989*t + 3.61803398874989)*(2.23606797749979*t - 0.618033988749895);
        @(t) 1.0*t*(1.38196601125011*t - 0.381966011250105)*(3.61803398874989*t - 2.61803398874989)};
    
    rk.w(1) = 5.0000000000000711e-02;
    rk.w(2) = 2.7222222222222214e-01;
    rk.w(3) = 3.5555555555555296e-01;
    rk.w(4) = 2.7222222222222214e-01;
    rk.w(5) = 4.9999999999999822e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 1.7267316464601140e-01;
    rk.d(3) = 5.0000000000000000e-01;
    rk.d(4) = 8.2732683535398865e-01;
    rk.d(5) = 1.0000000000000000e+00;
elseif m == 5
    rk.stages = 5;
    rk.order  = 8;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(1, 5) = 0.0000000000000000e+00;
    rk.A(2, 1) = 6.7728432186156914e-02;
    rk.A(2, 2) = 1.1974476934341162e-01;
    rk.A(2, 3) = -2.1735721866558116e-02;
    rk.A(2, 4) = 1.0635824225415494e-02;
    rk.A(2, 5) = -3.7001392424145354e-03;
    rk.A(3, 1) = 4.0625000000000022e-02;
    rk.A(3, 2) = 3.0318418332304287e-01;
    rk.A(3, 3) = 1.7777777777777748e-01;
    rk.A(3, 4) = -3.0961961100820501e-02;
    rk.A(3, 5) = 9.3749999999999667e-03;
    rk.A(4, 1) = 5.3700139242415901e-02;
    rk.A(4, 2) = 2.6158639799680827e-01;
    rk.A(4, 3) = 3.7729127742211288e-01;
    rk.A(4, 4) = 1.5247745287881109e-01;
    rk.A(4, 5) = -1.7728432186157494e-02;
    rk.A(5, 1) = 5.0000000000000711e-02;
    rk.A(5, 2) = 2.7222222222222214e-01;
    rk.A(5, 3) = 3.5555555555555296e-01;
    rk.A(5, 4) = 2.7222222222222214e-01;
    rk.A(5, 5) = 4.9999999999999822e-02;
    rk.b(1) = 5.0000000000000711e-02;
    rk.b(2) = 2.7222222222222214e-01;
    rk.b(3) = 3.5555555555555296e-01;
    rk.b(4) = 2.7222222222222214e-01;
    rk.b(5) = 4.9999999999999822e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 1.7267316464601140e-01;
    rk.c(3) = 5.0000000000000000e-01;
    rk.c(4) = 8.2732683535398865e-01;
    rk.c(5) = 1.0000000000000000e+00;
    
    rk.I = {@(t) 2.8*t^5 - 8.75*t^4 + 10.0*t^3 - 5.0*t^2 + 1.0*t;
        @(t) -6.53333333333333*t^5 + 19.0065024887242*t^4 - 18.9574494218929*t^3 + 6.75650248872424*t^2;
        @(t) 7.46666666666666*t^5 - 18.6666666666667*t^4 + 14.2222222222222*t^3 - 2.66666666666667*t^2;
        @(t) -6.53333333333333*t^5 + 13.6601641779424*t^4 - 8.2647728003293*t^3 + 1.41016417794243*t^2;
        @(t) 2.8*t^5 - 5.25*t^4 + 3.0*t^3 - 0.5*t^2};
    
    rk.L = {@(t) (-5.79128784747792*t + 1.0)*(-2.0*t + 1.0)*(-1.20871215252208*t + 1.0)*(-1.0*t + 1.0);
        @(t) 5.79128784747792*t*(-3.05505046330389*t + 1.52752523165195)*(-1.52752523165195*t + 1.26376261582597)*(-1.20871215252208*t + 1.20871215252208);
        @(t) 2.0*t*(-3.05505046330389*t + 2.52752523165195)*(-2.0*t + 2.0)*(3.05505046330389*t - 0.527525231651947);
        @(t) 1.20871215252208*t*(-5.79128784747792*t + 5.79128784747792)*(1.52752523165195*t - 0.263762615825973)*(3.05505046330389*t - 1.52752523165195);
        @(t) 1.0*t*(1.20871215252208*t - 0.20871215252208)*(2.0*t - 1.0)*(5.79128784747792*t - 4.79128784747792)};
    
    rk.w(1) = 3.3333333333338544e-02;
    rk.w(2) = 1.8923747814893233e-01;
    rk.w(3) = 2.7742918851774689e-01;
    rk.w(4) = 2.7742918851774689e-01;
    rk.w(5) = 1.8923747814892877e-01;
    rk.w(6) = 3.3333333333332327e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 1.1747233803526763e-01;
    rk.d(3) = 3.5738424175967742e-01;
    rk.d(4) = 6.4261575824032258e-01;
    rk.d(5) = 8.8252766196473242e-01;
    rk.d(6) = 1.0000000000000000e+00;
elseif m == 6
    rk.stages = 6;
    rk.order  = 10;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(1, 5) = 0.0000000000000000e+00;
    rk.A(1, 6) = 0.0000000000000000e+00;
    rk.A(2, 1) = 4.5679805133755025e-02;
    rk.A(2, 2) = 8.1867817008970653e-02;
    rk.A(2, 3) = -1.4874605789089831e-02;
    rk.A(2, 4) = 7.6276761182509575e-03;
    rk.A(2, 5) = -4.4717804405737050e-03;
    rk.A(2, 6) = 1.6434260039545328e-03;
    rk.A(3, 1) = 2.5908385387879651e-02;
    rk.A(3, 2) = 2.1384080863282540e-01;
    rk.A(3, 3) = 1.3396073565086108e-01;
    rk.A(3, 4) = -2.4004074733155134e-02;
    rk.A(3, 5) = 1.1807696377659785e-02;
    rk.A(3, 6) = -4.1293095563937343e-03;
    rk.A(4, 1) = 3.7462642889726894e-02;
    rk.A(4, 2) = 1.7742978177126290e-01;
    rk.A(4, 3) = 3.0143326325089825e-01;
    rk.A(4, 4) = 1.4346845286688215e-01;
    rk.A(4, 5) = -2.4603330483902175e-02;
    rk.A(4, 6) = 7.4249479454537859e-03;
    rk.A(5, 1) = 3.1689907329379707e-02;
    rk.A(5, 2) = 1.9370925858949306e-01;
    rk.A(5, 3) = 2.6980151239950168e-01;
    rk.A(5, 4) = 2.9230379430683229e-01;
    rk.A(5, 5) = 1.0736966113995816e-01;
    rk.A(5, 6) = -1.2346471800425363e-02;
    rk.A(6, 1) = 3.3333333333338544e-02;
    rk.A(6, 2) = 1.8923747814893233e-01;
    rk.A(6, 3) = 2.7742918851774689e-01;
    rk.A(6, 4) = 2.7742918851774689e-01;
    rk.A(6, 5) = 1.8923747814892877e-01;
    rk.A(6, 6) = 3.3333333333332327e-02;
    rk.b(1) = 3.3333333333338544e-02;
    rk.b(2) = 1.8923747814893233e-01;
    rk.b(3) = 2.7742918851774689e-01;
    rk.b(4) = 2.7742918851774689e-01;
    rk.b(5) = 1.8923747814892877e-01;
    rk.b(6) = 3.3333333333332327e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 1.1747233803526763e-01;
    rk.c(3) = 3.5738424175967742e-01;
    rk.c(4) = 6.4261575824032258e-01;
    rk.c(5) = 8.8252766196473242e-01;
    rk.c(6) = 1.0000000000000000e+00;
    rk.I = {@(t) -7.0*t^6 + 25.2*t^5 - 35.0*t^4 + 23.3333333333333*t^3 - 7.5*t^2 + 1.0*t;
        @(t) 16.6787017743863*t^6 - 57.6921830763946*t^5 + 74.9219643315031*t^4 - 43.8606614876656*t^3 + 10.1414159363197*t^2;
        @(t) -20.1945761807739*t^6 + 64.0398062955575*t^5 - 72.3643588846517*t^4 + 32.8327452286913*t^3 - 4.03618727030535*t^2;
        @(t) 20.1945761807739*t^6 - 57.1276507890862*t^5 + 55.0839701184735*t^4 - 20.1181509698197*t^3 + 2.24468464817617*t^2;
        @(t) -16.6787017743863*t^6 + 42.3800275699233*t^5 - 36.6415755653249*t^4 + 12.4794005621274*t^3 - 1.34991331419049*t^2;
        @(t) 7.0*t^6 - 16.8*t^5 + 14.0*t^4 - 4.66666666666667*t^3 + 0.5*t^2};
    rk.L = {@(t) (-8.51264235244709*t + 1.0)*(-2.79810882280716*t + 1.0)*(-1.55613986612825*t + 1.0)*(-1.13310895861751*t + 1.0)*(-1.0*t + 1.0);
        @(t) 8.51264235244709*t*(-4.1681966775134*t + 1.48964780909833)*(-1.90424170145658*t + 1.22369572485436)*(-1.3070950148596*t + 1.1535475074298)*(-1.13310895861751*t + 1.13310895861751);
        @(t) 2.79810882280716*t*(-3.50592393273573*t + 2.25296196636787)*(-1.90424170145658*t + 1.68054597660222)*(-1.55613986612825*t + 1.55613986612825)*(4.1681966775134*t - 0.489647809098334);
        @(t) 1.55613986612825*t*(-4.1681966775134*t + 3.67854886841507)*(-2.79810882280716*t + 2.79810882280716)*(1.90424170145658*t - 0.22369572485436)*(3.50592393273573*t - 1.25296196636787);
        @(t) 1.13310895861751*t*(-8.51264235244709*t + 8.51264235244709)*(1.3070950148596*t - 0.1535475074298)*(1.90424170145658*t - 0.680545976602217)*(4.1681966775134*t - 2.67854886841507);
        @(t) 1.0*t*(1.13310895861751*t - 0.133108958617506)*(1.55613986612825*t - 0.556139866128251)*(2.79810882280716*t - 1.79810882280716)*(8.51264235244709*t - 7.51264235244709)};
    rk.w(1) = 2.3809523809518396e-02;
    rk.w(2) = 1.3841302368081898e-01;
    rk.w(3) = 2.1587269060492531e-01;
    rk.w(4) = 2.4380952380957410e-01;
    rk.w(5) = 2.1587269060488268e-01;
    rk.w(6) = 1.3841302368073372e-01;
    rk.w(7) = 2.3809523809497080e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 8.4888051860716518e-02;
    rk.d(3) = 2.6557560326464291e-01;
    rk.d(4) = 5.0000000000000000e-01;
    rk.d(5) = 7.3442439673535709e-01;
    rk.d(6) = 9.1511194813928354e-01;
    rk.d(7) = 1.0000000000000000e+00;
elseif m == 7
    rk.stages = 7;
    rk.order  = 12;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(1, 5) = 0.0000000000000000e+00;
    rk.A(1, 6) = 0.0000000000000000e+00;
    rk.A(1, 7) = 0.0000000000000000e+00;
    rk.A(2, 1) = 3.2846264328292657e-02;
    rk.A(2, 2) = 5.9322894027551372e-02;
    rk.A(2, 3) = -1.0768594451189257e-02;
    rk.A(2, 4) = 5.5975917805697814e-03;
    rk.A(2, 5) = -3.4889299708074622e-03;
    rk.A(2, 6) = 2.2170965889145391e-03;
    rk.A(2, 7) = -8.3827044261510517e-04;
    rk.A(3, 1) = 1.8002223201814993e-02;
    rk.A(3, 2) = 1.5770113064168903e-01;
    rk.A(3, 3) = 1.0235481204686181e-01;
    rk.A(3, 4) = -1.8478259273458864e-02;
    rk.A(3, 5) = 9.5775801007413897e-03;
    rk.A(3, 6) = -5.6818645662243261e-03;
    rk.A(3, 7) = 2.0999811132187372e-03;
    rk.A(4, 1) = 2.7529761904761862e-02;
    rk.A(4, 2) = 1.2778825555983758e-01;
    rk.A(4, 3) = 2.3748565272164512e-01;
    rk.A(4, 4) = 1.2190476190476490e-01;
    rk.A(4, 5) = -2.1612962116713597e-02;
    rk.A(4, 6) = 1.0624768120944206e-02;
    rk.A(4, 7) = -3.7202380952390257e-03;
    rk.A(5, 1) = 2.1709542696303430e-02;
    rk.A(5, 2) = 1.4409488824701366e-01;
    rk.A(5, 3) = 2.0629511050420035e-01;
    rk.A(5, 4) = 2.6228778308299461e-01;
    rk.A(5, 5) = 1.1351787855807061e-01;
    rk.A(5, 6) = -1.9288106960918761e-02;
    rk.A(5, 7) = 5.8073006077066225e-03;
    rk.A(6, 1) = 2.4647794252146582e-02;
    rk.A(6, 2) = 1.3619592709186179e-01;
    rk.A(6, 3) = 2.1936162057579622e-01;
    rk.A(6, 4) = 2.3821193202899593e-01;
    rk.A(6, 5) = 2.2664128505611814e-01;
    rk.A(6, 6) = 7.9090129653224039e-02;
    rk.A(6, 7) = -9.0367405187805616e-03;
    rk.A(7, 1) = 2.3809523809518396e-02;
    rk.A(7, 2) = 1.3841302368081898e-01;
    rk.A(7, 3) = 2.1587269060492531e-01;
    rk.A(7, 4) = 2.4380952380957410e-01;
    rk.A(7, 5) = 2.1587269060488268e-01;
    rk.A(7, 6) = 1.3841302368073372e-01;
    rk.A(7, 7) = 2.3809523809497080e-02;
    rk.b(1) = 2.3809523809518396e-02;
    rk.b(2) = 1.3841302368081898e-01;
    rk.b(3) = 2.1587269060492531e-01;
    rk.b(4) = 2.4380952380957410e-01;
    rk.b(5) = 2.1587269060488268e-01;
    rk.b(6) = 1.3841302368073372e-01;
    rk.b(7) = 2.3809523809497080e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 8.4888051860716518e-02;
    rk.c(3) = 2.6557560326464291e-01;
    rk.c(4) = 5.0000000000000000e-01;
    rk.c(5) = 7.3442439673535709e-01;
    rk.c(6) = 9.1511194813928354e-01;
    rk.c(7) = 1.0000000000000000e+00;
    rk.I = {@(t) 18.8571428571429*t^7 - 77.0*t^6 + 126.0*t^5 - 105.0*t^4 + 46.6666666666667*t^3 - 10.5*t^2 + 1.0*t;
        @(t) -45.466237312795*t^7 + 181.151005331173*t^6 - 285.344064013286*t^5 + 222.886398816111*t^4 - 87.2902664004418*t^3 + 14.2015766029198*t^2;
        @(t) 56.7805230270808*t^7 - 214.261027094548*t^6 + 311.11412930341*t^5 - 212.883872728861*t^4 + 65.135105409068*t^3 - 5.66898522554551*t^2;
        @(t) -60.3428571428571*t^7 + 211.2*t^6 - 276.48*t^5 + 163.2*t^4 - 40.5333333333333*t^3 + 3.2*t^2;
        @(t) 56.7805230270808*t^7 - 183.202634095018*t^6 + 217.93895030482*t^5 - 116.089673317802*t^4 + 26.8386715846004*t^3 - 2.04996481307674*t^2;
        @(t) -45.466237312795*t^7 + 137.112655858392*t^6 - 153.229015594945*t^5 + 77.8871472305521*t^4 - 17.4835105932266*t^3 + 1.31737343570243*t^2;
        @(t) 18.8571428571429*t^7 - 55.0*t^6 + 60.0*t^5 - 30.0*t^4 + 6.66666666666667*t^3 - 0.5*t^2};
    rk.L = {@(t) (-11.7802208683124*t + 1.0)*(-3.76540611301375*t + 1.0)*(-2.0*t + 1.0)*(-1.36161054077884*t + 1.0)*(-1.092762477895*t + 1.0)*(-1.0*t + 1.0);
        @(t) 11.7802208683124*t*(-5.53441558220302*t + 1.46980575696081)*(-2.40898871854314*t + 1.20449435927157)*(-1.53955973039969*t + 1.13069022623684)*(-1.20449435927157*t + 1.10224717963579)*(-1.092762477895*t + 1.092762477895);
        @(t) 3.76540611301375*t*(-4.2657676160255*t + 2.13288380801275)*(-2.13288380801275*t + 1.56644190400637)*(-1.53955973039969*t + 1.40886950416285)*(-1.36161054077884*t + 1.36161054077884)*(5.53441558220302*t - 0.469805756960808);
        @(t) 2.0*t*(-4.2657676160255*t + 3.13288380801275)*(-2.40898871854314*t + 2.20449435927157)*(-2.0*t + 2.0)*(2.40898871854314*t - 0.204494359271571)*(4.2657676160255*t - 1.13288380801275);
        @(t) 1.36161054077884*t*(-5.53441558220302*t + 5.06460982524221)*(-3.76540611301375*t + 3.76540611301375)*(1.53955973039969*t - 0.130690226236839)*(2.13288380801275*t - 0.566441904006375)*(4.2657676160255*t - 2.13288380801275);
        @(t) 1.092762477895*t*(-11.7802208683124*t + 11.7802208683124)*(1.20449435927157*t - 0.102247179635786)*(1.53955973039969*t - 0.408869504162848)*(2.40898871854314*t - 1.20449435927157)*(5.53441558220302*t - 4.06460982524221);
        @(t) 1.0*t*(1.092762477895*t - 0.0927624778949954)*(1.36161054077884*t - 0.361610540778836)*(2.0*t - 1.0)*(3.76540611301375*t - 2.76540611301375)*(11.7802208683124*t - 10.7802208683124)};
    rk.w(1) = 1.7857142857167219e-02;
    rk.w(2) = 1.0535211357193930e-01;
    rk.w(3) = 1.7056134624166042e-01;
    rk.w(4) = 2.0622939732925261e-01;
    rk.w(5) = 2.0622939732923884e-01;
    rk.w(6) = 1.7056134624181141e-01;
    rk.w(7) = 1.0535211357176877e-01;
    rk.w(8) = 1.7857142857138797e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 6.4129925745196714e-02;
    rk.d(3) = 2.0414990928342885e-01;
    rk.d(4) = 3.9535039104876057e-01;
    rk.d(5) = 6.0464960895123943e-01;
    rk.d(6) = 7.9585009071657109e-01;
    rk.d(7) = 9.3587007425480329e-01;
    rk.d(8) = 1.0000000000000000e+00;
elseif m == 8
    rk.stages = 8;
    rk.order  = 14;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(1, 5) = 0.0000000000000000e+00;
    rk.A(1, 6) = 0.0000000000000000e+00;
    rk.A(1, 7) = 0.0000000000000000e+00;
    rk.A(1, 8) = 0.0000000000000000e+00;
    rk.A(2, 1) = 2.4737514438875521e-02;
    rk.A(2, 2) = 4.4892662602755040e-02;
    rk.A(2, 3) = -8.1407677423897609e-03;
    rk.A(2, 4) = 4.2540825485459493e-03;
    rk.A(2, 5) = -2.7042050750158246e-03;
    rk.A(2, 6) = 1.8453866944819924e-03;
    rk.A(2, 7) = -1.2262209861064904e-03;
    rk.A(2, 8) = 4.7147326405026817e-04;
    rk.A(3, 1) = 1.3258719822130158e-02;
    rk.A(3, 2) = 1.2064973282409734e-01;
    rk.A(3, 3) = 7.9997635786651866e-02;
    rk.A(3, 4) = -1.4480830962625474e-02;
    rk.A(3, 5) = 7.6319492068339517e-03;
    rk.A(3, 6) = -4.8326689231347111e-03;
    rk.A(3, 7) = 3.1049500159209265e-03;
    rk.A(3, 8) = -1.1795784864451070e-03;
    rk.A(4, 1) = 2.1034356725211811e-02;
    rk.A(4, 2) = 9.6280178312076470e-02;
    rk.A(4, 3) = 1.8904164984432792e-01;
    rk.A(4, 4) = 1.0124595564768946e-01;
    rk.A(4, 5) = -1.8137320211454422e-02;
    rk.A(4, 6) = 9.4170098024304316e-03;
    rk.A(4, 7) = -5.6088616425369331e-03;
    rk.A(4, 8) = 2.0774225710099015e-03;
    rk.A(5, 1) = 1.5779720286122512e-02;
    rk.A(5, 2) = 1.1096097521425818e-01;
    rk.A(5, 3) = 1.6114433643933035e-01;
    rk.A(5, 4) = 2.2436671754080351e-01;
    rk.A(5, 5) = 1.0498344168167084e-01;
    rk.A(5, 6) = -1.8480303602576242e-02;
    rk.A(5, 7) = 9.0719352596835279e-03;
    rk.A(5, 8) = -3.1772138680716822e-03;
    rk.A(6, 1) = 1.9036721343596241e-02;
    rk.A(6, 2) = 1.0224716355585883e-01;
    rk.A(6, 3) = 1.7539401516480879e-01;
    rk.A(6, 4) = 1.9859744812248437e-01;
    rk.A(6, 5) = 2.2071022829192799e-01;
    rk.A(6, 6) = 9.0563710455072055e-02;
    rk.A(6, 7) = -1.5297619252315542e-02;
    rk.A(6, 8) = 4.5984230350200050e-03;
    rk.A(7, 1) = 1.7385669593124931e-02;
    rk.A(7, 2) = 1.0657833455775290e-01;
    rk.A(7, 3) = 1.6871595954729202e-01;
    rk.A(7, 4) = 2.0893360240415859e-01;
    rk.A(7, 5) = 2.0197531478067221e-01;
    rk.A(7, 6) = 1.7870211398394531e-01;
    rk.A(7, 7) = 6.0459450969005957e-02;
    rk.A(7, 8) = -6.8803715817722377e-03;
    rk.A(8, 1) = 1.7857142857167219e-02;
    rk.A(8, 2) = 1.0535211357193930e-01;
    rk.A(8, 3) = 1.7056134624166042e-01;
    rk.A(8, 4) = 2.0622939732925261e-01;
    rk.A(8, 5) = 2.0622939732923884e-01;
    rk.A(8, 6) = 1.7056134624181141e-01;
    rk.A(8, 7) = 1.0535211357176877e-01;
    rk.A(8, 8) = 1.7857142857138797e-02;
    rk.b(1) = 1.7857142857167219e-02;
    rk.b(2) = 1.0535211357193930e-01;
    rk.b(3) = 1.7056134624166042e-01;
    rk.b(4) = 2.0622939732925261e-01;
    rk.b(5) = 2.0622939732923884e-01;
    rk.b(6) = 1.7056134624181141e-01;
    rk.b(7) = 1.0535211357176877e-01;
    rk.b(8) = 1.7857142857138797e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 6.4129925745196714e-02;
    rk.c(3) = 2.0414990928342885e-01;
    rk.c(4) = 3.9535039104876057e-01;
    rk.c(5) = 6.0464960895123943e-01;
    rk.c(6) = 7.9585009071657109e-01;
    rk.c(7) = 9.3587007425480329e-01;
    rk.c(8) = 1.0000000000000000e+00;
    rk.I = {@(t) -53.625*t^8 + 245.142857142857*t^7 - 462.0*t^6 + 462.0*t^5 - 262.5*t^4 + 84.0*t^3 - 14.0*t^2 + 1.0*t;
        @(t) 130.251563492062*t^8 - 585.889406712349*t^7 + 1078.33209806738*t^6 - 1039.18328738603*t^5 + 554.291632225413*t^4 - 156.634846180019*t^3 + 18.9375986071174*t^2;
        @(t) -165.730189263207*t^8 + 718.956518799109*t^7 - 1256.59193010952*t^6 + 1119.98956863724*t^5 - 525.459449684388*t^4 + 116.575332786358*t^3 - 7.56928981934849*t^2;
        @(t) 182.237019975786*t^8 - 750.743546048177*t^7 + 1223.76747132753*t^6 - 989.461680242413*t^5 + 403.089250788295*t^4 - 72.9801945679559*t^3 + 4.29790816426518*t^2;
        @(t) -182.237019975786*t^8 + 707.152613758108*t^7 - 1071.19920831229*t^6 + 792.80179935504*t^5 - 292.860206107967*t^4 + 49.3584396694795*t^3 - 2.81018898925795*t^2;
        @(t) 165.730189263207*t^8 - 606.88499530655*t^7 + 864.341597885566*t^6 - 602.365715978217*t^5 + 212.025648596717*t^4 - 34.6178225400263*t^3 + 1.94165942554412*t^2;
        @(t) -130.251563492062*t^8 + 456.123101224145*t^7 - 624.150028858668*t^6 + 421.219315614383*t^5 - 144.83687581807*t^4 + 23.2990908321636*t^3 - 1.29768738832023*t^2;
        @(t) 53.625*t^8 - 183.857142857143*t^7 + 247.5*t^6 - 165.0*t^5 + 56.25*t^4 - 9.0*t^3 + 0.5*t^2};
    rk.L ={@(t) (-15.5933441116591*t + 1.0)*(-4.89836122636559*t + 1.0)*(-2.52940182339839*t + 1.0)*(-1.6538504039298*t + 1.0)*(-1.25651804487402*t + 1.0)*(-1.06852438977308*t + 1.0)*(-1.0*t + 1.0);
        @(t) 15.5933441116591*t*(-7.14183772009195*t + 1.45800552267374)*(-3.01913711486245*t + 1.1936170389907)*(-1.85007138698186*t + 1.11864494067046)*(-1.36664267006926*t + 1.08764269295176)*(-1.14713082988053*t + 1.07356541494026)*(-1.06852438977308*t + 1.06852438977308);
        @(t) 4.89836122636559*t*(-5.23011234473426*t + 2.06772696071964)*(-2.49688077376697*t + 1.50973798345606)*(-1.69004511301302*t + 1.34502255650651)*(-1.36664267006926*t + 1.2789999771175)*(-1.25651804487402*t + 1.25651804487402)*(7.14183772009195*t - 0.458005522673742);
        @(t) 2.52940182339839*t*(-4.77784871831648*t + 2.88892435915824)*(-2.49688077376697*t + 1.9871427903109)*(-1.85007138698186*t + 1.7314264463114)*(-1.6538504039298*t + 1.6538504039298)*(3.01913711486245*t - 0.193617038990696)*(5.23011234473426*t - 1.06772696071964);
        @(t) 1.6538504039298*t*(-5.23011234473427*t + 4.16238538401462)*(-3.01913711486245*t + 2.82552007587175)*(-2.52940182339839*t + 2.52940182339839)*(1.85007138698186*t - 0.11864494067046)*(2.49688077376697*t - 0.509737983456064)*(4.77784871831648*t - 1.88892435915824);
        @(t) 1.25651804487402*t*(-7.14183772009195*t + 6.6838321974182)*(-4.89836122636559*t + 4.89836122636559)*(1.36664267006926*t - 0.0876426929517591)*(1.69004511301302*t - 0.345022556506511)*(2.49688077376697*t - 0.987142790310902)*(5.23011234473427*t - 3.16238538401462);
        @(t) 1.06852438977308*t*(-15.5933441116591*t + 15.5933441116591)*(1.14713082988053*t - 0.0735654149402642)*(1.36664267006926*t - 0.278999977117503)*(1.85007138698186*t - 0.731426446311402)*(3.01913711486245*t - 1.82552007587175)*(7.14183772009195*t - 5.6838321974182);
        @(t) 1.0*t*(1.06852438977308*t - 0.0685243897730792)*(1.25651804487402*t - 0.256518044874023)*(1.6538504039298*t - 0.653850403929795)*(2.52940182339839*t - 1.52940182339839)*(4.89836122636559*t - 3.89836122636559)*(15.5933441116591*t - 14.5933441116591)};
    rk.w(1) = 1.3888888888573092e-02;
    rk.w(2) = 8.2747680780357769e-02;
    rk.w(3) = 1.3726935624890757e-01;
    rk.w(4) = 1.7321425548614400e-01;
    rk.w(5) = 1.8575963718829991e-01;
    rk.w(6) = 1.7321425548779956e-01;
    rk.w(7) = 1.3726935624930703e-01;
    rk.w(8) = 8.2747680780148158e-02;
    rk.w(9) = 1.3888888888800466e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 5.0121002294269912e-02;
    rk.d(3) = 1.6140686024463113e-01;
    rk.d(4) = 3.1844126808691092e-01;
    rk.d(5) = 5.0000000000000000e-01;
    rk.d(6) = 6.8155873191308913e-01;
    rk.d(7) = 8.3859313975536887e-01;
    rk.d(8) = 9.4987899770573003e-01;
    rk.d(9) = 1.0000000000000000e+00;
elseif m == 9
    rk.stages = 9;
    rk.order  = 16;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(1, 5) = 0.0000000000000000e+00;
    rk.A(1, 6) = 0.0000000000000000e+00;
    rk.A(1, 7) = 0.0000000000000000e+00;
    rk.A(1, 8) = 0.0000000000000000e+00;
    rk.A(1, 9) = 0.0000000000000000e+00;
    rk.A(2, 1) = 1.9293838201043211e-02;
    rk.A(2, 2) = 3.5125520977621762e-02;
    rk.A(2, 3) = -6.3641024187047843e-03;
    rk.A(2, 4) = 3.3337771969983807e-03;
    rk.A(2, 5) = -2.1368470176082377e-03;
    rk.A(2, 6) = 1.4942991627282295e-03;
    rk.A(2, 7) = -1.0740606993816576e-03;
    rk.A(2, 8) = 7.3377266653928920e-04;
    rk.A(2, 9) = -2.8519577496630149e-04;
    rk.A(3, 1) = 1.0184080408227667e-02;
    rk.A(3, 2) = 9.5086508449361853e-02;
    rk.A(3, 3) = 6.3931995628437835e-02;
    rk.A(3, 4) = -1.1585731333842719e-02;
    rk.A(3, 5) = 6.1499369005517529e-03;
    rk.A(3, 6) = -3.9808257871827013e-03;
    rk.A(3, 7) = 2.7553240894192185e-03;
    rk.A(3, 8) = -1.8475051393836428e-03;
    rk.A(3, 9) = 7.1307702904133997e-04;
    rk.A(4, 1) = 1.6569369843571505e-02;
    rk.A(4, 2) = 7.5093517096208373e-02;
    rk.A(4, 3) = 1.5288206102488200e-01;
    rk.A(4, 4) = 8.4085478688912918e-02;
    rk.A(4, 5) = -1.5130673172334186e-02;
    rk.A(4, 6) = 8.0006035703998890e-03;
    rk.A(4, 7) = -5.0963258617404972e-03;
    rk.A(4, 8) = 3.2896245700400062e-03;
    rk.A(4, 9) = -1.2523876730272665e-03;
    rk.A(5, 1) = 1.1990017361114713e-02;
    rk.A(5, 2) = 8.7869833723072333e-02;
    rk.A(5, 3) = 1.2868222230657977e-01;
    rk.A(5, 4) = 1.8975808031592756e-01;
    rk.A(5, 5) = 9.2879818594119201e-02;
    rk.A(5, 6) = -1.6543824829402531e-02;
    rk.A(5, 7) = 8.5871339435147909e-03;
    rk.A(5, 8) = -5.1221529426661583e-03;
    rk.A(5, 9) = 1.8988715277732382e-03;
    rk.A(6, 1) = 1.5141276561891459e-02;
    rk.A(6, 2) = 7.9458056210455652e-02;
    rk.A(6, 3) = 1.4236568211163103e-01;
    rk.A(6, 4) = 1.6521365191590576e-01;
    rk.A(6, 5) = 2.0089031036048910e-01;
    rk.A(6, 6) = 8.9128776797757325e-02;
    rk.A(6, 7) = -1.5612704774772279e-02;
    rk.A(6, 8) = 7.6541636841600535e-03;
    rk.A(6, 9) = -2.6804809547229524e-03;
    rk.A(7, 1) = 1.3175811859639452e-02;
    rk.A(7, 2) = 8.4595185919852156e-02;
    rk.A(7, 3) = 1.3451403216049584e-01;
    rk.A(7, 4) = 1.7719508127309780e-01;
    rk.A(7, 5) = 1.7960970028762757e-01;
    rk.A(7, 6) = 1.8479998682074239e-01;
    rk.A(7, 7) = 7.3337360621481551e-02;
    rk.A(7, 8) = -1.2338827669076124e-02;
    rk.A(7, 9) = 3.7048084805633152e-03;
    rk.A(8, 1) = 1.4174084663636677e-02;
    rk.A(8, 2) = 8.2013908114277001e-02;
    rk.A(8, 3) = 1.3834341694973773e-01;
    rk.A(8, 4) = 1.7171995632256198e-01;
    rk.A(8, 5) = 1.8789648420532101e-01;
    rk.A(8, 6) = 1.6988047829077146e-01;
    rk.A(8, 7) = 1.4363345866920296e-01;
    rk.A(8, 8) = 4.7622159803086817e-02;
    rk.A(8, 9) = -5.4049493121510750e-03;
    rk.A(9, 1) = 1.3888888888573092e-02;
    rk.A(9, 2) = 8.2747680780357769e-02;
    rk.A(9, 3) = 1.3726935624890757e-01;
    rk.A(9, 4) = 1.7321425548614400e-01;
    rk.A(9, 5) = 1.8575963718829991e-01;
    rk.A(9, 6) = 1.7321425548779956e-01;
    rk.A(9, 7) = 1.3726935624930703e-01;
    rk.A(9, 8) = 8.2747680780148158e-02;
    rk.A(9, 9) = 1.3888888888800466e-02;
    rk.b(1) = 1.3888888888573092e-02;
    rk.b(2) = 8.2747680780357769e-02;
    rk.b(3) = 1.3726935624890757e-01;
    rk.b(4) = 1.7321425548614400e-01;
    rk.b(5) = 1.8575963718829991e-01;
    rk.b(6) = 1.7321425548779956e-01;
    rk.b(7) = 1.3726935624930703e-01;
    rk.b(8) = 8.2747680780148158e-02;
    rk.b(9) = 1.3888888888800466e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 5.0121002294269912e-02;
    rk.c(3) = 1.6140686024463113e-01;
    rk.c(4) = 3.1844126808691092e-01;
    rk.c(5) = 5.0000000000000000e-01;
    rk.c(6) = 6.8155873191308913e-01;
    rk.c(7) = 8.3859313975536887e-01;
    rk.c(8) = 9.4987899770573003e-01;
    rk.c(9) = 1.0000000000000000e+00;
    rk.I = {@(t) 158.888888888889*t^9 - 804.375*t^8 + 1716.0*t^7 - 2002.0*t^6 + 1386.0*t^5 - 577.5*t^4 + 140.0*t^3 - 18.0*t^2 + 1.0*t;
        @(t) -387.826688013941*t^9 + 1941.50456296089*t^8 - 4077.31662523114*t^7 + 4648.19720706004*t^6 - 3103.47526891263*t^5 + 1215.16423297818*t^4 - 260.5144183322*t^3 + 24.3497451715931*t^2;
        @(t) 499.512746224461*t^9 - 2438.08039573854*t^8 + 4944.99720013829*t^7 - 5362.67805176992*t^6 + 3318.6004771666*t^5 - 1145.98060795666*t^4 + 193.504602949225*t^3 - 9.73870165721154*t^2;
        @(t) -561.114629639091*t^9 + 2639.62550156796*t^8 - 5099.39149496636*t^7 + 5175.54485696907*t^6 - 2916.91759625291*t^5 + 878.352192599255*t^4 - 121.470579929397*t^3 + 5.54496390694938*t^2;
        @(t) 581.079365079365*t^9 - 2614.85714285714*t^8 + 4781.45306122449*t^7 - 4532.41904761905*t^6 + 2349.34857142857*t^5 - 643.657142857143*t^4 + 82.8952380952381*t^3 - 3.65714285714286*t^2;
        @(t) -561.114629639091*t^9 + 2410.40616518386*t^8 - 4182.51414942995*t^7 + 3744.31045357618*t^6 - 1832.28509545165*t^5 + 478.423482719909*t^4 - 59.6437583803321*t^3 + 2.59074567655936*t^2;
        @(t) 499.512746224461*t^9 - 2057.53432028161*t^8 + 3422.8128983106*t^7 - 2945.12195137384*t^6 + 1393.57723237532*t^5 - 354.73132875239*t^4 + 43.4964337271693*t^3 - 1.87444087344698*t^2;
        @(t) -387.826688013941*t^9 + 1548.93562916459*t^8 - 2507.04089004594*t^7 + 2108.33319982419*t^6 - 979.848320353303*t^5 + 246.179171268854*t^4 - 29.9341847963702*t^3 + 1.28483063269959*t^2;
        @(t) 158.888888888889*t^9 - 625.625*t^8 + 1001.0*t^7 - 834.166666666666*t^6 + 385.0*t^5 - 96.2499999999999*t^4 + 11.6666666666667*t^3 - 0.5*t^2};
    rk.L = {@(t) (-19.9517159319522*t + 1.0)*(-6.19552352659845*t + 1.0)*(-3.1402965011654*t + 1.0)*(-2.0*t + 1.0)*(-1.46722498469511*t + 1.0)*(-1.19247338499778*t + 1.0)*(-1.05276567059102*t + 1.0)*(-1.0*t + 1.0);
        @(t) 19.9517159319522*t*(-8.985867732143*t + 1.45038069721874)*(-3.72688956999172*t + 1.18679544068805)*(-2.22281992513487*t + 1.11140996256743)*(-1.58368743756201*t + 1.07937600169145)*(-1.26827563396219*t + 1.06356724595959)*(-1.11140996256743*t + 1.05570498128372)*(-1.05276567059102*t + 1.05276567059102);
        @(t) 6.19552352659845*t*(-6.36803114515111*t + 2.02784391307886)*(-2.95339710876154*t + 1.47669855438077)*(-1.92251543148805*t + 1.31030717956834)*(-1.47669855438077*t + 1.23834927719039)*(-1.26827563396219*t + 1.20470838800261)*(-1.19247338499778*t + 1.19247338499778)*(8.985867732143*t - 0.450380697218745);
        @(t) 3.1402965011654*t*(-5.50785957504205*t + 2.75392978752102)*(-2.75392978752102*t + 1.87696489376051)*(-1.92251543148805*t + 1.61220825191971)*(-1.58368743756201*t + 1.50431143587056)*(-1.46722498469511*t + 1.46722498469511)*(3.72688956999172*t - 0.186795440688046)*(6.36803114515111*t - 1.02784391307886);
        @(t) 2.0*t*(-5.50785957504205*t + 3.75392978752102)*(-2.95339710876154*t + 2.47669855438077)*(-2.22281992513487*t + 2.11140996256743)*(-2.0*t + 2.0)*(2.22281992513487*t - 0.111409962567434)*(2.95339710876154*t - 0.476698554380772)*(5.50785957504205*t - 1.75392978752102);
        @(t) 1.46722498469511*t*(-6.36803114515112*t + 5.34018723207225)*(-3.72688956999172*t + 3.54009412930368)*(-3.1402965011654*t + 3.1402965011654)*(1.58368743756201*t - 0.0793760016914519)*(1.92251543148805*t - 0.310307179568338)*(2.75392978752102*t - 0.876964893760512)*(5.50785957504205*t - 2.75392978752102);
        @(t) 1.19247338499778*t*(-8.985867732143*t + 8.53548703492426)*(-6.19552352659845*t + 6.19552352659845)*(1.26827563396219*t - 0.0635672459595857)*(1.47669855438077*t - 0.238349277190386)*(1.92251543148805*t - 0.612208251919708)*(2.95339710876154*t - 1.47669855438077)*(6.36803114515112*t - 4.34018723207225);
        @(t) 1.05276567059102*t*(-19.9517159319522*t + 19.9517159319522)*(1.11140996256743*t - 0.0557049812837168)*(1.26827563396219*t - 0.204708388002607)*(1.58368743756201*t - 0.504311435870556)*(2.22281992513487*t - 1.11140996256743)*(3.72688956999172*t - 2.54009412930368)*(8.985867732143*t - 7.53548703492426);
        @(t) 1.0*t*(1.05276567059102*t - 0.0527656705910212)*(1.19247338499778*t - 0.192473384997779)*(1.46722498469511*t - 0.467224984695109)*(2.0*t - 1.0)*(3.1402965011654*t - 2.1402965011654)*(6.19552352659845*t - 5.19552352659845)*(19.9517159319522*t - 18.9517159319522)};
    rk.w(1) = 1.1111111108846217e-02;
    rk.w(2) = 6.6652995420554362e-02;
    rk.w(3) = 1.1244467104029354e-01;
    rk.w(4) = 1.4602134183726889e-01;
    rk.w(5) = 1.6376988059528230e-01;
    rk.w(6) = 1.6376988059393227e-01;
    rk.w(7) = 1.4602134183701310e-01;
    rk.w(8) = 1.1244467102915223e-01;
    rk.w(9) = 6.6652995428739814e-02;
    rk.w(10) = 1.1111111110780669e-02;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 4.0233045916770571e-02;
    rk.d(3) = 1.3061306744724749e-01;
    rk.d(4) = 2.6103752509477773e-01;
    rk.d(5) = 4.1736052116680650e-01;
    rk.d(6) = 5.8263947883319356e-01;
    rk.d(7) = 7.3896247490522227e-01;
    rk.d(8) = 8.6938693255275257e-01;
    rk.d(9) = 9.5976695408322943e-01;
    rk.d(10) = 1.0000000000000000e+00;
elseif m == 10
    rk.stages = 10;
    rk.order  = 18;
    rk.A = zeros(rk.stages);
    rk.b = zeros(rk.stages, 1);
    rk.c = zeros(rk.stages, 1);
    rk.d = zeros(rk.stages + 1, 1);
    rk.w = zeros(rk.stages + 1, 1);
    rk.A(1, 1) = 0.0000000000000000e+00;
    rk.A(1, 2) = 0.0000000000000000e+00;
    rk.A(1, 3) = 0.0000000000000000e+00;
    rk.A(1, 4) = 0.0000000000000000e+00;
    rk.A(1, 5) = 0.0000000000000000e+00;
    rk.A(1, 6) = 0.0000000000000000e+00;
    rk.A(1, 7) = 0.0000000000000000e+00;
    rk.A(1, 8) = 0.0000000000000000e+00;
    rk.A(1, 9) = 0.0000000000000000e+00;
    rk.A(1, 10) = 0.0000000000000000e+00;
    rk.A(2, 1) = 1.5465148886122203e-02;
    rk.A(2, 2) = 2.8217976000731632e-02;
    rk.A(2, 3) = -5.1090759506765750e-03;
    rk.A(2, 4) = 2.6797026134601915e-03;
    rk.A(2, 5) = -1.7246233123523059e-03;
    rk.A(2, 6) = 1.2191900098376621e-03;
    rk.A(2, 7) = -9.0141037896695857e-04;
    rk.A(2, 8) = 6.6976025819376057e-04;
    rk.A(2, 9) = -4.6614172744751455e-04;
    rk.A(2, 10) = 1.8251951786848498e-04;
    rk.A(3, 1) = 8.0745648288632049e-03;
    rk.A(3, 2) = 7.6774514675232330e-02;
    rk.A(3, 3) = 5.2118036265195872e-02;
    rk.A(3, 4) = -9.4497054574489425e-03;
    rk.A(3, 5) = 5.0342308481156894e-03;
    rk.A(3, 6) = -3.2904586839602734e-03;
    rk.A(3, 7) = 2.3383540355341736e-03;
    rk.A(3, 8) = -1.7004415361783851e-03;
    rk.A(3, 9) = 1.1701705230945788e-03;
    rk.A(3, 10) = -4.5619805120070134e-04;
    rk.A(4, 1) = 1.3376018525483134e-02;
    rk.A(4, 2) = 6.0184542475475666e-02;
    rk.A(4, 3) = 1.2565307727248745e-01;
    rk.A(4, 4) = 7.0355532309858582e-02;
    rk.A(4, 5) = -1.2689136533026415e-02;
    rk.A(4, 6) = 6.7646974964830076e-03;
    rk.A(4, 7) = -4.4106165482058479e-03;
    rk.A(4, 8) = 3.0723444103200048e-03;
    rk.A(4, 9) = -2.0690098877445828e-03;
    rk.A(4, 10) = 8.0007557365130433e-04;
    rk.A(5, 1) = 9.4248721168792571e-03;
    rk.A(5, 2) = 7.1199715230434890e-02;
    rk.A(5, 3) = 1.0482643149414173e-01;
    rk.A(5, 4) = 1.6070946771131567e-01;
    rk.A(5, 5) = 8.0966723864505263e-02;
    rk.A(5, 6) = -1.4500644574203747e-02;
    rk.A(5, 7) = 7.6716787853250423e-03;
    rk.A(5, 8) = -4.8992681562403106e-03;
    rk.A(5, 9) = 3.1694435943592225e-03;
    rk.A(5, 10) = -1.2078988997579199e-03;
    rk.A(6, 1) = 1.2319010010862108e-02;
    rk.A(6, 2) = 6.3483551831041041e-02;
    rk.A(6, 3) = 1.1734393918786168e-01;
    rk.A(6, 4) = 1.3834966305439167e-01;
    rk.A(6, 5) = 1.7827052516633124e-01;
    rk.A(6, 6) = 8.2803156727550231e-02;
    rk.A(6, 7) = -1.4688125871529678e-02;
    rk.A(6, 8) = 7.6182395373507461e-03;
    rk.A(6, 9) = -4.5467198048072532e-03;
    rk.A(6, 10) = 1.6862389942473577e-03;
    rk.A(7, 1) = 1.0311035537515778e-02;
    rk.A(7, 2) = 6.8722005312793044e-02;
    rk.A(7, 3) = 1.0937232662314500e-01;
    rk.A(7, 4) = 1.5043195838740075e-01;
    rk.A(7, 5) = 1.5700518309623135e-01;
    rk.A(7, 6) = 1.7645901712502621e-01;
    rk.A(7, 7) = 7.5665809530107708e-02;
    rk.A(7, 8) = -1.3208406241574266e-02;
    rk.A(7, 9) = 6.4684529503438171e-03;
    rk.A(7, 10) = -2.2649074143075154e-03;
    rk.A(8, 1) = 1.1567309161193862e-02;
    rk.A(8, 2) = 6.5482824903028813e-02;
    rk.A(8, 3) = 1.1414511257038384e-01;
    rk.A(8, 4) = 1.4368298780719613e-01;
    rk.A(8, 5) = 1.6706033927613362e-01;
    rk.A(8, 6) = 1.5873564974260290e-01;
    rk.A(8, 7) = 1.5547104729751027e-01;
    rk.A(8, 8) = 6.0326634765260678e-02;
    rk.A(8, 9) = -1.0121519248514232e-02;
    rk.A(8, 10) = 3.0365462827877110e-03;
    rk.A(9, 1) = 1.0928591592573866e-02;
    rk.A(9, 2) = 6.7119137148438313e-02;
    rk.A(9, 3) = 1.1177491077683044e-01;
    rk.A(9, 4) = 1.4692275221932505e-01;
    rk.A(9, 5) = 1.6255069058206573e-01;
    rk.A(9, 6) = 1.6549450390145637e-01;
    rk.A(9, 7) = 1.4334163922217158e-01;
    rk.A(9, 8) = 1.1755374697713705e-01;
    rk.A(9, 9) = 3.8435019424468919e-02;
    rk.A(9, 10) = -4.3540377737709690e-03;
    rk.A(10, 1) = 1.1111111108846217e-02;
    rk.A(10, 2) = 6.6652995420554362e-02;
    rk.A(10, 3) = 1.1244467104029354e-01;
    rk.A(10, 4) = 1.4602134183726889e-01;
    rk.A(10, 5) = 1.6376988059528230e-01;
    rk.A(10, 6) = 1.6376988059393227e-01;
    rk.A(10, 7) = 1.4602134183701310e-01;
    rk.A(10, 8) = 1.1244467102915223e-01;
    rk.A(10, 9) = 6.6652995428739814e-02;
    rk.A(10, 10) = 1.1111111110780669e-02;
    rk.b(1) = 1.1111111108846217e-02;
    rk.b(2) = 6.6652995420554362e-02;
    rk.b(3) = 1.1244467104029354e-01;
    rk.b(4) = 1.4602134183726889e-01;
    rk.b(5) = 1.6376988059528230e-01;
    rk.b(6) = 1.6376988059393227e-01;
    rk.b(7) = 1.4602134183701310e-01;
    rk.b(8) = 1.1244467102915223e-01;
    rk.b(9) = 6.6652995428739814e-02;
    rk.b(10) = 1.1111111110780669e-02;
    rk.c(1) = 0.0000000000000000e+00;
    rk.c(2) = 4.0233045916770571e-02;
    rk.c(3) = 1.3061306744724749e-01;
    rk.c(4) = 2.6103752509477773e-01;
    rk.c(5) = 4.1736052116680650e-01;
    rk.c(6) = 5.8263947883319356e-01;
    rk.c(7) = 7.3896247490522227e-01;
    rk.c(8) = 8.6938693255275257e-01;
    rk.c(9) = 9.5976695408322943e-01;
    rk.c(10) = 1.0000000000000000e+00;
    rk.I = {@(t) -486.2*t^10 + 2701.11111111111*t^9 - 6435.0*t^8 + 8580.0*t^7 - 7007.0*t^6 + 3603.6*t^5 - 1155.0*t^4 + 220.0*t^3 - 22.5*t^2 + 1.0*t;
        @(t) 1190.81979427469*t^10 - 6562.43184879089*t^9 + 15463.8202687062*t^8 - 20303.4308538806*t^7 + 16208.8010054132*t^6 - 8043.52080014334*t^5 + 2424.35137490418*t^4 - 408.780432517271*t^3 + 30.4381450292819*t^2;
        @(t) -1546.69844296572*t^10 + 8368.30354086329*t^9 - 19241.372784806*t^8 + 24422.4787237694*t^7 - 18569.1100267371*t^6 + 8553.32282578742*t^5 - 2277.81396755133*t^4 + 303.180523018514*t^3 - 12.1779467074298*t^2;
        @(t) 1762.56189457901*t^10 - 9280.79408678643*t^9 + 20602.5601160653*t^8 - 24957.700515674*t^7 + 17800.914867114*t^6 - 7487.64592857272*t^5 + 1743.88572129791*t^4 - 190.579835166397*t^3 + 6.94378848513395*t^2;
        @(t) -1866.60844096158*t^10 + 9504.43725897093*t^9 - 20242.4877198327*t^8 + 23284.8172730461*t^7 - 15563.2642647411*t^6 + 6040.27206091424*t^5 - 1283.03695212325*t^4 + 130.63390936911*t^3 - 4.59935476110313*t^2;
        @(t) 1866.60844096158*t^10 - 9161.64715064492*t^9 + 18699.9322323657*t^8 - 20488.3560780524*t^7 + 12974.2423571094*t^6 - 4763.69559617907*t^5 + 964.854421941643*t^4 - 95.0695006550409*t^3 + 3.29464303374918*t^2;
        @(t) -1762.56189457901*t^10 + 8344.82485900369*t^9 - 16390.698591043*t^8 + 17261.6206380185*t^7 - 10519.9890787575*t^6 + 3735.04144343639*t^5 - 737.01208762951*t^4 + 71.3736170676763*t^3 - 2.45288417544269*t^2;
        @(t) 1546.69844296572*t^10 - 7098.68088879391*t^9 + 13528.0708504938*t^8 - 13853.3892394865*t^7 + 8239.37252520403*t^6 - 2867.92156320065*t^5 + 557.616718188519*t^4 - 53.4839646318684*t^3 + 1.82956393190325*t^2;
        @(t) -1190.81979427469*t^10 + 5345.76609395603*t^9 - 9988.82437194924*t^8 + 10057.9600522595*t^7 - 5899.63405127156*t^6 + 2031.34755795772*t^5 - 391.845229028159*t^4 + 37.3923501819437*t^3 - 1.27595483609266*t^2;
        @(t) 486.2*t^10 - 2160.88888888889*t^9 + 4004.0*t^8 - 4004.0*t^7 + 2335.66666666667*t^6 - 800.800000000001*t^5 + 154.0*t^4 - 14.6666666666667*t^3 + 0.5*t^2};
    rk.L = {@(t) (-24.8551899865768*t + 1.0)*(-7.65620178397452*t + 1.0)*(-3.83086684428577*t + 1.0)*(-2.39601004235935*t + 1.0)*(-1.71632722520386*t + 1.0)*(-1.35324868847807*t + 1.0)*(-1.15023583005065*t + 1.0)*(-1.04191959907101*t + 1.0)*(-1.0*t + 1.0);
        @(t) 24.8551899865768*t*(-11.0643921418274*t + 1.4451541970833)*(-4.52889363351105*t + 1.18221118550922)*(-2.65162329882488*t + 1.1066828819356)*(-1.84363595140857*t + 1.07417508988683)*(-1.43116914575603*t + 1.05758029395587)*(-1.20604873970641*t + 1.04852301432247)*(-1.08750747647141*t + 1.04375373823571)*(-1.04191959907101*t + 1.04191959907101);
        @(t) 7.65620178397452*t*(-7.66727359298271*t + 2.00144612293675)*(-3.48738929336059*t + 1.45549861298851)*(-2.21226011315119*t + 1.28895007936987)*(-1.64379218215821*t + 1.21470073915749)*(-1.35359417439217*t + 1.17679708719609)*(-1.20604873970641*t + 1.15752572538394)*(-1.15023583005065*t + 1.15023583005065)*(11.0643921418274*t - 0.445154197083297);
        @(t) 3.83086684428577*t*(-6.39701147705249*t + 2.66986004397267)*(-3.10943384632974*t + 1.81167891569185)*(-2.09237873100499*t + 1.54618936550249)*(-1.64379218215821*t + 1.42909144300072)*(-1.43116914575603*t + 1.37358885180016)*(-1.35324868847807*t + 1.35324868847807)*(4.52889363351105*t - 0.18221118550922)*(7.66727359298271*t - 1.00144612293675);
        @(t) 2.39601004235935*t*(-6.05037697550395*t + 3.52518848775197)*(-3.10943384632974*t + 2.29775493063789)*(-2.21226011315119*t + 1.92331003378132)*(-1.84363595140857*t + 1.76946086152174)*(-1.71632722520386*t + 1.71632722520386)*(2.65162329882488*t - 0.1066828819356)*(3.48738929336059*t - 0.455498612988515)*(6.39701147705249*t - 1.66986004397267);
        @(t) 1.71632722520386*t*(-6.3970114770525*t + 4.72715143307982)*(-3.48738929336059*t + 3.03189068037207)*(-2.65162329882488*t + 2.54494041688928)*(-2.39601004235935*t + 2.39601004235935)*(1.84363595140857*t - 0.0741750898868301)*(2.21226011315119*t - 0.288950079369872)*(3.10943384632974*t - 0.81167891569185)*(6.05037697550395*t - 2.52518848775197);
        @(t) 1.35324868847807*t*(-7.6672735929827*t + 6.66582747004595)*(-4.52889363351105*t + 4.34668244800183)*(-3.83086684428577*t + 3.83086684428577)*(1.43116914575603*t - 0.0575802939558676)*(1.64379218215821*t - 0.214700739157489)*(2.09237873100499*t - 0.546189365502493)*(3.10943384632974*t - 1.29775493063789)*(6.3970114770525*t - 3.72715143307982);
        @(t) 1.15023583005065*t*(-11.0643921418274*t + 10.6192379447441)*(-7.65620178397452*t + 7.65620178397452)*(1.20604873970641*t - 0.0485230143224714)*(1.35359417439217*t - 0.176797087196086)*(1.64379218215821*t - 0.429091443000724)*(2.21226011315119*t - 0.923310033781319)*(3.48738929336059*t - 2.03189068037207)*(7.6672735929827*t - 5.66582747004595);
        @(t) 1.04191959907101*t*(-24.8551899865768*t + 24.8551899865768)*(1.08750747647141*t - 0.0437537382357056)*(1.20604873970641*t - 0.157525725383942)*(1.43116914575603*t - 0.373588851800161)*(1.84363595140857*t - 0.769460861521743)*(2.65162329882488*t - 1.54494041688928)*(4.52889363351105*t - 3.34668244800183)*(11.0643921418274*t - 9.61923794474411);
        @(t) 1.0*t*(1.04191959907101*t - 0.041919599071007)*(1.15023583005065*t - 0.150235830050646)*(1.35324868847807*t - 0.353248688478069)*(1.71632722520386*t - 0.716327225203863)*(2.39601004235935*t - 1.39601004235935)*(3.83086684428577*t - 2.83086684428577)*(7.65620178397452*t - 6.65620178397452)*(24.8551899865768*t - 23.8551899865768)};
    rk.w(1) = 9.0909090863497966e-03;
    rk.w(2) = 5.4806136621209589e-02;
    rk.w(3) = 9.3584940870641731e-02;
    rk.w(4) = 1.2402405212924350e-01;
    rk.w(5) = 1.4343956237297473e-01;
    rk.w(6) = 1.5010879772398766e-01;
    rk.w(7) = 1.4343956240190892e-01;
    rk.w(8) = 1.2402405216562329e-01;
    rk.w(9) = 9.3584940893845170e-02;
    rk.w(10) = 5.4806136640308978e-02;
    rk.w(11) = 9.0909090888828814e-03;
    rk.d(1) = 0.0000000000000000e+00;
    rk.d(2) = 3.2999284795970418e-02;
    rk.d(3) = 1.0775826316842779e-01;
    rk.d(4) = 2.1738233650189748e-01;
    rk.d(5) = 3.5212093220653029e-01;
    rk.d(6) = 5.0000000000000000e-01;
    rk.d(7) = 6.4787906779346971e-01;
    rk.d(8) = 7.8261766349810258e-01;
    rk.d(9) = 8.9224173683157226e-01;
    rk.d(10) = 9.6700071520402964e-01;
    rk.d(11) = 1.0000000000000000e+00;
else
    disp("No this stages for now!")
end
end

%% Form the initial guess for ydot at each point.
function sol = form_initial_input(t_span, y0, z0, p, alpha)

% using the ODEequation function

global ny nz np m N rk

sol(N)=struct('delta_t', [], 't_span', [], 'y', [], 'z', [], 'y_Dot', [], 'z_Tilda', [], 'p', []);

c = rk.c;

sol(N).t_span = t_span;

parfor i = 1 : N - 1
    sol(i).y = (y0(i, 1 : ny))';
    if nz > 0
        sol(i).z = (z0(i, 1 : nz))';
    end
    t_individual = zeros(m, 1);
    delta_t = t_span(i + 1) - t_span(i);
    sol(i).delta_t = delta_t;
    for j = 1 : m
        y_temp = ((1 - c(j)) * y0(i, 1 : ny) + c(j) * y0(i + 1, 1 : ny))';
        z_temp = ((1 - c(j)) * z0(i, 1 : nz) + c(j) * z0(i + 1, 1 : nz))';
        t_individual(j) = t_span(i) + c(j) * delta_t;
        y_dot = ODE_h(y_temp, z_temp, p, alpha);
        sol(i).y_Dot(1 : ny, j) = y_dot;
        sol(i).z_Tilda(1 : nz, j) = z_temp;
    end
    sol(i).t_span = t_individual;
end
sol(N).y = (y0(N, 1 : ny))';
sol(N).z = (z0(N, 1 : nz))';
sol(N).p = p(1 : np);
end

%% Generate the vector structure from the struct structure
function [t_span, q] = struct_to_vec(sol)

global ny nz np m N

% size of q is N*ny + (N - 1)*m*(ny + nz) + np
q = zeros((N * ny + (N - 1) * m * (ny + nz) + np), 1);
t_span = sol(N).t_span;

for i = 1 : N - 1
    q(1 + (i - 1) * (ny + m * (ny + nz)) : i * ny + (i - 1) * m * (ny + nz)) = sol(i).y(1 : ny);
    for j = 1 : m
                q(1 + i * ny + (i - 1) * m * (ny + nz) + (j - 1) * (ny + nz) :  i * ny + (i - 1) * m * (ny + nz) + j * (ny + nz)) = [sol(i).y_Dot(1 : ny, j); sol(i).z_Tilda(1 : nz, j)];
    end
end
q(1 + (N - 1) * ny + (N - 1) * m * (ny + nz) : N * ny + (N - 1) * m * (ny + nz)) = sol(N).y(1 : ny);
q(1 + N * ny + (N - 1) * m * (ny + nz) : N * ny + (N - 1) * m * (ny + nz) + np) = sol(N).p;
end

%% Calculate the residual of the system
function [F, sol] = F_q(t_span, q, alpha)

% using the ODEequation function and the DAEequation equation

global ny nz np m N rk

% size of the residual is N*ny+(N-1)*m*(ny+nz)+np
F = zeros(N * ny + (N - 1) * m * (ny + nz) + np, 1);
sol = vec_to_struc(t_span, q);
sol = collocation_update(sol);
p = sol(N).p;
b = rk.b;
y = zeros(ny, N);
for i = 1 : N
    y(1 : ny, i) = sol(i).y(1 : ny);
end
parfor i = 1 : N - 1
    f_a = zeros(m * (ny + nz), 1);
    for j = 1 : m
        r_h = ODE_h(sol(i).y_Tilda(1 : ny, j), sol(i).z_Tilda(1 : nz, j), p, alpha) - sol(i).y_Dot(1 : ny, j);
        r_g = DAE_g(sol(i).y_Tilda(1 : ny, j), sol(i).z_Tilda(1 : nz, j), p, alpha);
        f_a(1 + (j - 1) * (ny + nz) : j * (ny + nz), 1) = [r_h; r_g];
    end
    sol(i).f_a = f_a;
    sum = zeros(ny, 1);
    for j = 1 : m
        sum = sum + b(j) * sol(i).y_Dot(1 : ny, j);
    end
    y_next = y(1 : ny, i + 1);
    y_cur = y(1 : ny, i);
    delta_t = sol(i).delta_t;
    r_y = y_next - y_cur - delta_t * sum;
    sol(i).f_b = r_y;
end

r_bc = boundary_constraint(sol(1).y(1 : ny), sol(N).y(1 : ny), p);
F(1 + (N - 1) * (ny + m * (ny + nz)) : N * ny + (N - 1) * m * (ny + nz) + np) = r_bc;
sol(N).f_b = r_bc; % f_N
for i = 1 : N - 1
    F(1 + (i - 1) * (ny + m * (ny + nz)) : (i - 1) * (ny + m * (ny + nz)) + m * (ny + nz)) = sol(i).f_a;
    F(1 + (i - 1) * ny + i * m * (ny + nz) : i * (ny + m * (ny + nz))) = sol(i).f_b;
end
end

%% Generate the struct structure from the vector structure
function sol = vec_to_struc(t_span, q)

global ny nz np m N rk

c = rk.c;
sol(N)=struct('delta_t', [], 't_span', [], 'y', [], 'y_Dot', [], 'z_Tilda', [], 'y_Tilda', [], 'p', [], 'f_a', [], 'f_b', [], 'J', [], 'W', [], 'V', [], 'D', [], 'A', [], 'C', [], 'H', [], 'b', []);

sol(N).t_span = t_span;

for i = 1 : N - 1
    t_individual = zeros(m, 1);
    delta_t = t_span(i + 1) - t_span(i);
    sol(i).delta_t = delta_t;
    start_index_y = 1 + (i - 1) * (ny + m * (ny + nz));
    end_index_y = start_index_y + ny - 1;
    sol(i).y = q(start_index_y : end_index_y);
    for j = 1 : m
        t_individual(j) = t_span(i) + c(j) * delta_t;
        start_index_y_collocation = end_index_y + 1 + (j - 1) * (ny + nz);
        end_index_y_collocation = start_index_y_collocation + ny - 1;
        start_index_z_collocation = end_index_y_collocation + 1;
        end_index_z_collocation = start_index_z_collocation + nz - 1;
        sol(i).y_Dot(1 : ny, j) = q(start_index_y_collocation : end_index_y_collocation);
        sol(i).z_Tilda(1 : nz, j) = q(start_index_z_collocation : end_index_z_collocation);
    end
    sol(i).t_span = t_individual;
end
sol(N).y = q(1 + (N - 1) * ny + (N - 1) * m * (ny + nz) : N * ny + (N - 1) * m * (ny + nz));
sol(N).p = q(1 + N * ny + (N - 1) * m * (ny + nz) : N * ny + (N - 1) * m * (ny + nz) + np);
end

%% Calculate the value of the ODE variables at each collocation points
function sol = collocation_update(sol)

global ny m N rk

a = rk.A;

for i = 1 : N - 1
    delta_t = sol(i).delta_t;
    for j = 1 : m
        sum = zeros(ny, 1);
        for k = 1 : m
            sum = sum + a(j, k) * sol(i).y_Dot(1 : ny, k);
        end 
        sol(i).y_Tilda(1 : ny, j) = sol(i).y(1 : ny) + delta_t * sum;
    end
end
end

%% Construct the Jacobian matrix of the residual
function sol = DF_construct(sol, alpha)

% using the derivative function (difference_matrix), and the derivative of
% the boundary constraint function (r).

global ny nz np m N rk

b = rk.b;
a = rk.A;
p = sol(N).p;

parfor i = 1 : N - 1
    delta_t = sol(i).delta_t;
    J = zeros(m * (ny + nz), ny);
    W = zeros(m * (ny + nz), m * (ny + nz));
    V = zeros(m * (ny + nz), np);
    D = zeros(ny, m * (ny + nz));
    for j = 1 : m
        s = [sol(i).y_Tilda(1 : ny, j); sol(i).z_Tilda(1 : nz, j)];
        [hy, hz, hp, gy, gz, gp] = difference_DAE(s, p, alpha);
        J(1 + (j - 1) * (ny + nz) : (j - 1) * (ny + nz) + ny, 1 : ny) = hy;
        J(1 + j * ny + (j - 1) * nz : j * (ny + nz), 1 : ny) = gy;
        V(1 + (j - 1) * (ny + nz) : (j - 1) * (ny + nz) + ny, 1 : np) = hp;
        V(1 + j * ny + (j - 1) * nz : j * (ny + nz), 1 : np) = gp;
        D(1 : ny, 1 + (j - 1) * (ny + nz) : (j - 1) * (ny + nz) + ny) = delta_t * b(j) * eye(ny);
        % outer loop is for each block row, this for loop is for the block
        % column of each block row
        for k = 1 : m
            if j == k
                W(1 + (j - 1) * (ny + nz) : j * (ny + nz), 1 + (j - 1) * (ny + nz) : j * (ny + nz)) = [(-eye(ny) + delta_t * a(j, j) * hy) hz; (delta_t * a(j, j) * gy) gz];
            else
                W(1 + (j - 1) * (ny + nz) : j * (ny + nz), 1 + (k - 1) * (ny + nz) : k * (ny + nz)) = [(delta_t * a(j, k) * hy) zeros(ny, nz); (delta_t * a(j, k) * gy) zeros(nz, nz)];
            end
        end
    end
    sol(i).J = J;
    sol(i).W = W;
    sol(i).V = V;
    sol(i).D = D;
end
[r_x0,r_xM,r_p] = difference_BC(sol(1).y(1 : ny), sol(N).y(1 : ny), p);
sol(1).B = r_x0;
sol(N).B = r_xM;
sol(N).V = r_p;

parfor i = 1 : N - 1
    W_inv = inv(sol(i).W);
    % size of A: ny by ny
    sol(i).A = -eye(ny) + sol(i).D * W_inv * sol(i).J;
    % size of C: ny by ny
    sol(i).C = eye(ny);
    % size of H: ny by np
    sol(i).H = sol(i).D * W_inv * sol(i).V;
    % size of b: ny by 1
    sol(i).b = -sol(i).f_b - sol(i).D * W_inv * sol(i).f_a;
end
sol(N).H = sol(N).V;
sol(N).b = -sol(N).f_b;

end

%% QR decomposition of the BBAD system
function sol = sequential_qr(sol)

% QR decomposition
global ny np N

ns = ny;

sol(1).C_tilde = sol(1).C;
sol(1).G_tilde = sol(1).A;
sol(1).H_tilde = sol(1).H;
sol(1).b_tilde = sol(1).b;
for i = 1 : N - 2
    [Q, R] = qr([sol(i).C_tilde; sol(i + 1).A]);
    sol(i).R = R(1 : ns, :);
    EC = Q' * [zeros(ns); sol(i + 1).C];
    sol(i).E = EC(1 : ns, 1 : ns);
    sol(i + 1).C_tilde = EC(1 + ns : 2 * ns, 1 : ns);
    GG = Q' * [sol(i).G_tilde; zeros(ns)];
    sol(i).G = GG(1 : ns, 1 : ns);
    sol(i + 1).G_tilde = GG(1 + ns : 2 * ns, 1 : ns);
    JH = Q' * [sol(i).H_tilde; sol(i + 1).H];
    sol(i).K = JH(1 : ns, 1 : np);
    sol(i + 1).H_tilde = JH(1 + ns : 2 * ns, 1 : np);
    db = Q' * [sol(i).b_tilde; sol(i + 1).b];
    sol(i).d = db(1 : ns);
    sol(i + 1).b_tilde = db(1 + ns : 2 * ns);
end
[Q, R] = qr([sol(N - 1).C_tilde sol(N - 1).G_tilde sol(N - 1).H_tilde; sol(N).B sol(1).B sol(N).H]);
sol(N - 1).R = R(1 : ns, 1 : ns);
sol(N - 1).G = R(1 : ns, 1 + ns : 2 * ns);
sol(N - 1).K = R(1 : ns, 1 + 2 * ns : 2 * ns + np);
sol(N).R = R(1 + ns : 2 * ns, 1 + ns : 2 * ns);
sol(N).K = R(1 + ns : 2 * ns, 1 + 2 * ns : 2 * ns + np);
sol(N).Rp = R(1 + 2 * ns : 2 * ns + np, 1 + 2 * ns : 2 * ns + np);

d = Q' * [sol(N - 1).b_tilde; sol(N).b];
sol(N -1).d = d(1 : ns);
sol(N).d = d(1 + ns : 2 * ns);
sol(N).dp = d(1 + 2 * ns : 2 * ns + np);
end

%% Backsubstitution of the BABD system to get the solution
function sol = backwardsubstitution(sol)

global N

% delta_p = zeros(np, 1);
delta_p = sol(N).Rp \ sol(N).dp;
sol(N).delta_p = delta_p;
% delta_y1 = zeros(ny, 1);
delta_y1 = sol(N).R \ (sol(N).d - sol(N).K * delta_p);
sol(1).delta_y = delta_y1;
% delta_yN = zeros(ny, 1);
delta_yN = sol(N - 1).R \ (sol(N - 1).d - sol(N-1).G * delta_y1 - sol(N - 1).K * delta_p);
sol(N).delta_y = delta_yN;
for j = N - 1 : -1 : 2
%     delta_yj = zeros(ny, 1);
    delta_yj = sol(j - 1).R \ (sol(j - 1).d - sol(j - 1).E * sol(j + 1).delta_y - sol(j - 1).G * sol(1).delta_y - sol(j - 1).K * sol(N).delta_p);
    sol(j).delta_y = delta_yj;
end

for i = 1 : N - 1
    sol(i).delta_k = inv(sol(i).W) * (-sol(i).f_a - sol(i).J * sol(i).delta_y - sol(i).V * sol(N).delta_p);
end
end

%% Get delta_q of the system
function delta_q = get_deltaq(sol)

global ny nz np N m

delta_q = zeros(N * ny + (N - 1) * m * (ny + nz) + np, 1);

for i = 1 : N - 1
    delta_q(1 + (i - 1) * (ny + m * (ny + nz)) : i * (ny + m * (ny + nz))) = [sol(i).delta_y; sol(i).delta_k];
end
delta_q(1 + (N - 1) * (ny + m * (ny + nz)) : N * ny + (N - 1) * m * (ny + nz) + np) = [sol(N).delta_y; sol(N).delta_p];
end

%% Compute segment residual at each node
function residual = compute_segment_residual(sol, alpha)

global ny nz np N m rk tol

    function ydot = get_ydot(j, t)
        % ydot = sum_{k=1,m} L_k(t) * ydot_jk
        ydot = zeros(ny, 1);
        for k = 1 : m
            ydot = ydot + rk.L{k}(t) * sol(j).y_Dot(1 : ny, k);
        end
    end
    function z = get_z(j, t)
        % z = sum_{k=1,m} L_k(t) * z_jk
        z = zeros(nz, 1);
        for k = 1 : m
            z = z + rk.L{k}(t) * sol(j).z_Tilda(1 : nz, k);
        end
    end
    function y = get_y(j, t)
        % y = sy + delta*sum_{k=1,m} I_k(t) * ydot_jk
        y = sol(j).y;
        delta_t = sol(j).delta_t;
        for k = 1 : m
            y = y + delta_t * rk.I{k}(t) * sol(j).y_Dot(1 : ny, k);
        end
    end
if np > 0
    p = sol(N).p;
end


residual = zeros(N, 1);
max_rho_h = 0;
max_rho_g = 0;
max_rho_r = 0;
[tau, w] = gauss_coeff(m + 1);
for j = 1 : N - 1
    delta = sol(j).delta_t;
    rho_h = 0;
    rho_g = 0;
    for i = 1 : m + 1
        t = tau(i);
        ydot = get_ydot(j, t); 
        y = get_y(j, t);
        if nz > 0
            z = get_z(j, t);
        end
        h_res = ODE_h(y, z, p, alpha);
        % h(y,z,p) - ydot
        h_res = h_res - ydot;
        rho_h = rho_h + dot(h_res, h_res) * w(i);
        if nz > 0
            g_res = DAE_g(y, z, p, alpha);
            rho_g = rho_g + dot(g_res, g_res) * w(i);
        end
    end
    
    residual(j) = sqrt(delta * (rho_h + rho_g)) / tol;
    
    max_rho_h = max(max_rho_h, sqrt(delta * rho_h));
    max_rho_g = max(max_rho_g, sqrt(delta * rho_g));
end

if (ny+np) > 0
    r = boundary_constraint(sol(1).y(1 : ny), sol(N).y(1 : ny), p);
    max_rho_r = norm(r);
    residual(N) = max_rho_r / tol;
end
fprintf(1, "res: |h|: %e, |g|: %e, |r|: %e\n", max_rho_h, max_rho_g, max_rho_r);
end

%% compute segement residual
function [residual, max_residual] = compute_segment_residual1(t_span, q0, alpha)

global ny nz np N m rk tol

    function ydot = get_ydot(j, t)
        % ydot = sum_{k=1,m} L_k(t) * ydot_jk
        ydot = zeros(ny, 1);
        for k = 1 : m
            ydot = ydot + rk.L{k}(t) * sol(j).y_Dot(1 : ny, k);
        end
    end
    function z = get_z(j, t)
        % z = sum_{k=1,m} L_k(t) * z_jk
        z = zeros(nz, 1);
        for k = 1 : m
            z = z + rk.L{k}(t) * sol(j).z_Tilda(1 : nz, k);
        end
    end
    function y = get_y(j, t)
        % y = sy + delta*sum_{k=1,m} I_k(t) * ydot_jk
        y = sol(j).y;
        delta_t = sol(j).delta_t;
        for k = 1 : m
            y = y + delta_t * rk.I{k}(t) * sol(j).y_Dot(1 : ny, k);
        end
    end

sol = vec_to_struc(t_span, q0);
if np > 0
    p = sol(N).p;
end

residual = zeros(N, 1);
max_rho_h = 0;
max_rho_g = 0;
max_rho_r = 0;
[tau, w] = gauss_coeff(m + 1);
for j = 1 : N - 1
    delta = sol(j).delta_t;
    rho_h = 0;
    rho_g = 0;
    for i = 1 : m + 1
        t = tau(i);
        ydot = get_ydot(j, t); 
        y = get_y(j, t);
        if nz > 0
            z = get_z(j, t);
        end
        h_res = ODE_h(y, z, p, alpha);
        % h(y,z,p) - ydot
        h_res = h_res - ydot;
        rho_h = rho_h + dot(h_res, h_res) * w(i);
        if nz > 0
            g_res = DAE_g(y, z, p, alpha);
            rho_g = rho_g + dot(g_res, g_res) * w(i);
        end
    end
    
    residual(j) = sqrt(delta * (rho_h + rho_g)) / tol;
    
    max_rho_h = max(max_rho_h, sqrt(delta * rho_h));
    max_rho_g = max(max_rho_g, sqrt(delta * rho_g));
end

if (ny+np) > 0
    r = boundary_constraint(sol(1).y(1 : ny), sol(N).y(1 : ny), p);
    max_rho_r = norm(r);
    residual(N) = max_rho_r / tol;
end
max_residual = norm(residual, Inf);
fprintf(1, "res: |h|: %e, |g|: %e, |r|: %e\n", max_rho_h, max_rho_g, max_rho_r);
end

%% Get the gauss coeffieients
function [t, w] = gauss_coeff(n)

    if n == 2
        x1 = 0.577350269189626;
        w1 = 1.000000000000000;
        t = [(-x1+1)*0.5, (x1+1)*0.5];
        w = [w1*0.5, w1*0.5];
    elseif n == 3
        x0 = 0.000000000000000;
        x1 = 0.774596669241483;
        w0 = 0.888888888888889;
        w1 = 0.555555555555556;
        t = [(-x1+1)*0.5, 0.5, (x1+1)*0.5];
        w = [w1*0.5, w0*0.5, w1*0.5];
    elseif n == 4
        x1 = 0.339981043584856;
        x2 = 0.861136311594053;
        w1 = 0.652145154862546;
        w2 = 0.347854845137454;
        t = [(-x2+1)*0.5, (-x1+1)*0.5, (x1+1)*0.5, (x2+1)*0.5];
        w = [w2*0.5, w1*0.5,  w1*0.5, w2*0.5];
    elseif n == 5
        x0 = 0.000000000000000;
        x1 = 0.538469310105683;
        x2 = 0.906179845938664 ;
        w0 = 0.568888888888889;
        w1 = 0.478628670499366;
        w2 = 0.236926885056189;
        t = [(-x2+1)*0.5, (-x1+1)*0.5, 0.5, (x1+1)*0.5, (x2+1)*0.5];
        w = [w2*0.5, w1*0.5, w0*0.5, w1*0.5, w2*0.5];
    elseif n == 6
        x1 = 0.238619186083197;
        x2 = 0.661209386466265;
        x3 = 0.932469514203152;
        w1 = 0.467913934572691;
        w2 = 0.360761573048139;
        w3 = 0.171324492379170;
        t = [(-x3+1)*0.5, (-x2+1)*0.5, (-x1+1)*0.5, (x1+1)*0.5, (x2+1)*0.5, (x3+1)*0.5];
        w = [w3*0.5, w2*0.5, w1*0.5,  w1*0.5, w2*0.5, w3*0.5];
    elseif n == 7
        x0 = 0.000000000000000;
        x1 = 0.405845151377397;
        x2 = 0.741531185599394;
        x3 = 0.949107912342759;
        w0 = 0.417959183673469;
        w1 = 0.381830050505119;
        w2 =0.279705391489277;
        w3 = 0.129484966168870;
        t = [(-x3+1)*0.5, (-x2+1)*0.5, (-x1+1)*0.5, 0.5, (x1+1)*0.5, (x2+1)*0.5, (x3+1)*0.5];
        w = [w3*0.5, w2*0.5, w1*0.5,  w0*0.5, w1*0.5, w2*0.5, w3*0.5];
    elseif n == 8
        x1 = 0.183434642495650;
        x2 = 0.525532409916329;
        x3 = 0.796666477413627;
        x4 = 0.960289856497536;
        w1 = 0.362683783378362;
        w2 = 0.313706645877887;
        w3 = 0.222381034453374;
        w4 = 0.101228536290376;
        t = [(-x4+1)*0.5, (-x3+1)*0.5, (-x2+1)*0.5, (-x1+1)*0.5, (x1+1)*0.5, (x2+1)*0.5, (x3+1)*0.5, (x4+1)*0.5];
        w = [w4*0.5, w3*0.5, w2*0.5, w1*0.5,  w1*0.5, w2*0.5, w3*0.5, w4*0.5];
    elseif n == 9
        x0 = 0.000000000000000;
        x1 = 0.324253423403809;
        x2 = 0.613371432700590;
        x3 = 0.836031107326636;
        x4 = 0.968160239507626;
        w0 = 0.330239355001260;
        w1 = 0.312347077040003;
        w2 = 0.260610696402935;
        w3 = 0.180648160694857;
        w4 = 0.081274388361574;
        t = [(-x4+1)*0.5, (-x3+1)*0.5, (-x2+1)*0.5, (-x1+1)*0.5, 0.5, (x1+1)*0.5, (x2+1)*0.5, (x3+1)*0.5, (x4+1)*0.5];
        w = [w4*0.5, w3*0.5, w2*0.5, w1*0.5,  w0*0.5, w1*0.5, w2*0.5, w3*0.5, w4*0.5];
    elseif n == 10
        x1 = 0.148874338981631;
        x2 = 0.433395394129247;
        x3 = 0.679409568299024;
        x4 = 0.865063366688985;
        x5 = 0.973906528517172;
        w1 = 0.295524224714753;
        w2 = 0.269266719309996;
        w3 = 0.219086362515982;
        w4 = 0.149451349150581;
        w5 = 0.066671344308688;
        t = [(-x5+1)*0.5, (-x4+1)*0.5, (-x3+1)*0.5, (-x2+1)*0.5, (-x1+1)*0.5, (x1+1)*0.5, (x2+1)*0.5, (x3+1)*0.5, (x4+1)*0.5, (x5+1)*0.5];
        w = [w5*0.5, w4*0.5, w3*0.5, w2*0.5, w1*0.5,  w1*0.5, w2*0.5, w3*0.5, w4*0.5, w5*0.5];
    elseif n == 11
        x0 = 0.000000000000000;
        x1 = 0.269543155952345;
        x2 = 0.519096129110681;
        x3 = 0.730152005574049;
        x4 = 0.887062599768095;
        x5 = 0.978228658146057;
        w0 = 0.272925086777901;
        w1 = 0.262804544510247;
        w2 = 0.233193764591990;
        w3 = 0.186290210927734;
        w4 = 0.125580369464905;
        w5 = 0.055668567116174;
        t = [(-x5+1)*0.5, (-x4+1)*0.5, (-x3+1)*0.5, (-x2+1)*0.5, (-x1+1)*0.5, 0.5, (x1+1)*0.5, (x2+1)*0.5, (x3+1)*0.5, (x4+1)*0.5, (x5+1)*0.5];
        w = [w5*0.5, w4*0.5, w3*0.5, w2*0.5, w1*0.5,  w0*0.5, w1*0.5, w2*0.5, w3*0.5, w4*0.5, w5*0.5];
    end
end

%% Remesh the problem
function [tspan, y0, z0] = remesh(tspan, y0, z0, residual)
global ny nz N m

%% Deleting Nodes
i = 1;
k_D = 0; % Record the number of the deleted nodes

while i < N - 4
    res_i = residual(i);
    if res_i <= 1e-3
        lte_iplus2 = residual(i + 1);
        lte_iplus3 = residual(i + 2);
        lte_iplus4 = residual(i + 3);
        lte_iplus5 = residual(i + 4);
        if ((lte_iplus2 <= 1e-3) && (lte_iplus3 <= 1e-3) && (lte_iplus4 <= 1e-3) && (lte_iplus5 <= 1e-3))
            tspan(i + 1) = [];
            residual(i + 1) = [];
            y0(i + 1, :) = [];
            z0(i + 1, :) = [];
            tspan(i + 2) = [];
            residual(i+2) = [];
            y0(i + 2, :) = [];
            z0(i + 2, :) = [];
            N = N - 2;
            k_D = k_D + 2;
            i = i + 2;
        end
    end
    i = i + 1;
end

%% Adding Nodes

i = 1;
k_A = 0; % Record the number of the added nodes

while i <= N - 1
    res_i = residual(i);
    if res_i > 1
        if res_i > 100
            delta_t = (tspan(i + 1) - tspan(i)) / 4;
            t_i = tspan(i);
            t_iplus1 = t_i + delta_t;
            t_iplus2 = t_i + 2 * delta_t;
            t_iplus3 = t_i + 3 * delta_t;
            tspan = [tspan(1 : i); t_iplus1; t_iplus2; t_iplus3; tspan(i+1 : end)];
            if i == N - 1
                delta_res = residual(i) / 4;
            else
                delta_res = (residual(i + 1) - residual(i)) / 4;
            end
            res_iplus1 = res_i + delta_res;
            res_iplus2 = res_i + 2 * delta_res;
            res_iplus3 = res_i + 3 * delta_res;
            residual = [residual(1 : i); res_iplus1; res_iplus2; res_iplus3; residual(i+1:end)];
            y0_i = y0(i, :);
            y0_iNext = y0(i + 1, :);
            delta_y0 = (y0_iNext - y0_i) / 4;
            y0_iplus1 = y0_i + delta_y0;
            y0_iplus2 = y0_i + 2 * delta_y0;
            y0_iplus3 = y0_i + 3 * delta_y0;
            y0 = [y0(1 : i, :);  y0_iplus1; y0_iplus2; y0_iplus3; y0(i + 1 : end, :)];
            z0_i = z0(i, :);
            z0_iNext = z0(i + 1, :);
            delta_z0 = (z0_iNext - z0_i) / 4;
            z0_iplus1 = z0_i + delta_z0;
            z0_iplus2 = z0_i + 2 * delta_z0;
            z0_iplus3 = z0_i + 3 * delta_z0;
            z0 = [z0(1 : i, :);  z0_iplus1; z0_iplus2; z0_iplus3; z0(i + 1 : end, :)];
            N = N + 3;
            k_A = k_A + 3;
            i = i + 3;
        else
            delta_t = (tspan(i + 1) - tspan(i)) / 2;
            t_i = tspan(i);
            t_iplus1 = t_i + delta_t;
            tspan = [tspan(1 : i); t_iplus1; tspan(i+1 : end)];
            if i == N - 1
                delta_res = residual(i) / 2;
            else
                delta_res = (residual(i + 1) - residual(i)) / 2;
            end
            res_iplus1 = res_i + delta_res;
            residual = [residual(1 : i); res_iplus1; residual(i+1:end)];
            y0_i = y0(i, :);
            y0_iNext = y0(i + 1, :);
            delta_y0 = (y0_iNext - y0_i) / 2;
            y0_iplus1 = y0_i + delta_y0;
            y0 = [y0(1 : i, :);  y0_iplus1; y0(i + 1 : end, :)];
            z0_i = z0(i, :);
            z0_iNext = z0(i + 1, :);
            delta_z0 = (z0_iNext - z0_i) / 2;
            z0_iplus1 = z0_i + delta_z0;
            z0 = [z0(1 : i, :);  z0_iplus1; z0(i + 1 : end, :)];
            N = N + 1;
            k_A = k_A + 1;
            i = i + 1;
        end
    end
    i = i + 1;
end
end

%% Mesh refinement of the system
function [tspan, q0] = mesh_refinement(tspan, q0, residual)
global ny nz N m

size_y = ny;
size_z = nz;
stages = m;
size_node = size_y + stages * (size_y + size_z); 

%% Deleting Nodes
i = 1;
k_D = 0; % Record the number of the deleted nodes

while i < N - 4
    res_i = residual(i);
    if res_i <= 1e-3
        lte_iplus2 = residual(i + 1);
        lte_iplus3 = residual(i + 2);
        lte_iplus4 = residual(i + 3);
        lte_iplus5 = residual(i + 4);
        if ((lte_iplus2 <= 1e-3) && (lte_iplus3 <= 1e-3) && (lte_iplus4 <= 1e-3) && (lte_iplus5 <= 1e-3))
            tspan(i + 1) = [];
            residual(i + 1) = [];
            start_index = 1 + i * size_node;
            end_index = (i + 1) * size_node;
            q0(start_index : end_index) = [];
            tspan(i + 2) = [];
            residual(i+2) = [];
            start_index = 1 + (i + 1) * size_node;
            end_index = (i + 2) * size_node;
            q0(start_index : end_index) = [];
            N = N - 2;
            k_D = k_D + 2;
            i = i + 2;
        end
    end
    i = i + 1;
end

%% Adding Nodes

i = 1;
k_A = 0; % Record the number of the added nodes

while i <= N - 2
    res_i = residual(i);
    if res_i > 1
        if res_i > 100
            delta_t = (tspan(i + 1) - tspan(i)) / 4;
            t_i = tspan(i);
            t_iplus1 = t_i + delta_t;
            t_iplus2 = t_i + 2 * delta_t;
            t_iplus3 = t_i + 3 * delta_t;
            tspan = [tspan(1 : i); t_iplus1; t_iplus2; t_iplus3; tspan(i+1 : end)];
            if i == N - 1
                delta_res = residual(i) / 4;
            else
                delta_res = (residual(i + 1) - residual(i)) / 4;
            end
            res_iplus1 = res_i + delta_res;
            res_iplus2 = res_i + 2 * delta_res;
            res_iplus3 = res_i + 3 * delta_res;
            residual = [residual(1 : i); res_iplus1; res_iplus2; res_iplus3; residual(i+1:end)];
            start_index_1 = 1 + (i) * size_node;
            end_index_1 = (i + 1) * size_node;
            start_index_2 = 1 + (i - 1) * size_node;
            end_index_2 = (i) * size_node;
            delta_q0 = (q0(start_index_1 : end_index_1) - q0(start_index_2 : end_index_2)) / 4;
            q0_i = q0(start_index_2 : end_index_2);
            q0_iplus1 = q0_i + delta_q0;
            q0_iplus2 = q0_i + 2 * delta_q0;
            q0_iplus3 = q0_i + 3 * delta_q0;
            q0 = [q0(1 : end_index_2);  q0_iplus1; q0_iplus2; q0_iplus3; q0(start_index_1 : end)];
            N = N + 3;
            k_A = k_A + 3;
            i = i + 3;
        else
            delta_t = (tspan(i + 1) - tspan(i)) / 2;
            t_i = tspan(i);
            t_iplus1 = t_i + delta_t;
            tspan = [tspan(1 : i); t_iplus1; tspan(i+1 : end)];
            if i == N - 1
                delta_res = residual(i) / 2;
            else
                delta_res = (residual(i + 1) - residual(i)) / 2;
            end
            res_iplus1 = res_i + delta_res;
            residual = [residual(1 : i); res_iplus1; residual(i+1:end)];
            start_index_1 = 1 + (i) * size_node;
            end_index_1 = (i + 1) * size_node;
            start_index_2 = 1 + (i - 1) * size_node;
            end_index_2 = (i) * size_node;
            delta_q0 = (q0(start_index_1 : end_index_1) - q0(start_index_2 : end_index_2)) / 2;
            q0_i = q0(start_index_2 : end_index_2);
            q0_iplus1 = q0_i + delta_q0;
            q0 = [q0(1 : end_index_2);  q0_iplus1; q0(start_index_1 : end)];
            N = N + 1;
            k_A = k_A + 1;
            i = i + 1;
        end
    end
    i = i + 1;
end
end

%% Recover the solution from the vector
function [y, yDot, z, p] = recover_solution(t_span, q)

global m rk nz ny np N

sol = vec_to_struc(t_span, q);
y = zeros(N, ny);
yDot = zeros((N - 1) * m, ny);
z = zeros(N, nz);
p = zeros(np, 1);

p(1 : np) = sol(N).p;

for i = 1 : N
    y(i, :) = sol(i).y;
    if i ~= N
        for j = 1 : m
            row_mat = 1 + (i - 1) * m + (j - 1);
            yDot(row_mat, :) = sol(i).y_Dot(:, j)';
        end
    end
    
    if i ~= N
        tau = 0;
        for j = 1 : m
            z(i, :) = z(i, :) + rk.L{j}(tau) * (sol(i).z_Tilda(: , j))';
        end
    elseif i == N
        tau = 1;
        for j = 1 : m
            z(i, :) = z(i, :) + rk.L{j}(tau) * (sol(N - 1).z_Tilda(: , j))';
        end
    end
end
end

